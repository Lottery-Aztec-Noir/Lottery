
{"noir_version":"0.23.0+9a70040211d205f472aa31924649c2fef999eb49","name":"Token","functions":[{"name":"getBalance","function_type":"Unconstrained","is_internal":false,"abi":{"parameters":[{"name":"owner","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"param_witnesses":{"owner":[{"start":0,"end":1}]},"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"return_witnesses":[1]},"bytecode":"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","debug_symbols":""},{"name":"chooseWinner_private","function_type":"Secret","is_internal":false,"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"authwit::aztec::abi::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"authwit::aztec::protocol_types::contrakt::deployment_data::ContractDeploymentData","fields":[{"name":"public_key","type":{"kind":"struct","path":"authwit::aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"kind":"struct","path":"authwit::aztec::protocol_types::contract_class::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"private_global_variables","type":{"kind":"struct","path":"authwit::aztec::abi::PrivateGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]}}]},"visibility":"private"},{"name":"randomNumber","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"}],"param_witnesses":{"inputs":[{"start":0,"end":36}],"randomNumber":[{"start":36,"end":37}]},"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"meta_hwm","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"read_requests","type":{"kind":"array","length":32,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_key_validation_requests","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest","fields":[{"name":"public_key","type":{"kind":"struct","path":"authwit::aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"secret_key","type":{"kind":"struct","path":"authwit::aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey","fields":[{"name":"high","type":{"kind":"field"}},{"name":"low","type":{"kind":"field"}}]}}]}}},{"name":"new_commitments","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"encrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"encrypted_log_preimages_length","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"authwit::aztec::protocol_types::contrakt::deployment_data::ContractDeploymentData","fields":[{"name":"public_key","type":{"kind":"struct","path":"authwit::aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"kind":"struct","path":"authwit::aztec::protocol_types::contract_class::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]},"visibility":"public"},"return_witnesses":[82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288]},"bytecode":"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","debug_symbols":"7ZrbatwwEIbfxdchaM6jvErpRegBCiUtTe7CvnvX6UpyHO26nqWLl/QqBPRJv/4dj2ZkPw/ff3y6f/r24+FxuHseAIe7D8/D48/7h/Hfx6f7X0/DXboZvjx83v/d3Qxfv33/Mtyx7m7eDINsdhgJOec62HuDkRwPg5GpDQa13tTAymVuEPRX4z/eDEDXKpwvJlxAi3AxPVu49IQre6FUEi/ITwJlieRQB+93Mi6g5y8ASnUPmacLvB1MVn5XBqpDDV+0WF+LpiNaRsa7jFKRpKrpUvrz+Vow1XhA1NNagKwKp5wmscOjHEzbkgPbkoPbkkPbksPbkiPbkqPbkmPbkvMXKTnP0jj2U2euh6lm8gulcUqLWlhm+gkCDAYYCjAcYCTAaICxAOMBJq9nOBAHfCQOamhq9jRnMMBQgOEA040DS+oHxpLPSzLWAGN9RrAxb7zuxoFBKvsxmGSyA9ONA8NUSkxDttN5Ri1LMczRZwtIN2iMpLQQRp4XEploWQA0yaxgl26EmUiJStMESx1Bah2BtPQHCSM9iuDmFNH5igC9LjEJvb6iv+wkNdcoAJ7/rnyFmuUKNesVarZlzZeqjqSfdbVlajW/7NOet6ZI0/mK/kWMsZWDhTO2Kfen/igarlE0XqNoukbRvCTakpyeP9cOMBu8mr9zj+qUyz2qT8rscbOjGjlbDSSrzzxAWtADyNVwemU4dUZ7vbL03H5J6V4YQ22mEVOzXXr3xZmtOphPDwVqHT3NDIykNP1v+GUNt3dpOCRO9SSe3C1J6PWJ+qZN3M9dOz1gnNo4is9XJN5m4i1tWzxIE78UwOZ1p5ZTqw6VXnYK72anuO2dYquJ0GghKQnUpCTTF8zdbC1YbBFrkW4vhZHRe3XFWv/pPnWl091yjUKVyUkKTJG8bvxuPadijCc97TnkVIoXTGJne77tkvsfeu5QWhHnPH/6t10Xr3SFa89lk6vzvitUb6lZ2n2S/PkSQm/7H0OglpCkyaccVqD+JwtLEEQgjEAUgXg15BH3POKeR9zziHsecc8D7mEOuLeH1rs3QhCBMAJRBFrtnqTbbuO58FIq3XqI6r+WxfqGVf2tPkgRCCIQRiBaDVkgYvfQ+ogdIYhAGIEoAq2OWOXbbmWScz1UW2dtfzpr7wee1fPPtDF0QPpxt8B03eZcKi2ZBMOhzMIjwUC5XIwwp3kVgkeCYQmCCIQRiFZDx47O9j0oT/tZLJBEoG4ZJ16bFpvEEO8+7na/AQ=="},{"name":"constructor","function_type":"Secret","is_internal":false,"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"authwit::aztec::abi::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"authwit::aztec::protocol_types::contrakt::deployment_data::ContractDeploymentData","fields":[{"name":"public_key","type":{"kind":"struct","path":"authwit::aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"kind":"struct","path":"authwit::aztec::protocol_types::contract_class::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"private_global_variables","type":{"kind":"struct","path":"authwit::aztec::abi::PrivateGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]}}]},"visibility":"private"},{"name":"admin","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"name","type":{"kind":"string","length":31},"visibility":"private"},{"name":"symbol","type":{"kind":"string","length":31},"visibility":"private"},{"name":"decimals","type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"private"}],"param_witnesses":{"admin":[{"start":36,"end":37}],"decimals":[{"start":99,"end":100}],"inputs":[{"start":0,"end":36}],"name":[{"start":37,"end":68}],"symbol":[{"start":68,"end":99}]},"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"meta_hwm","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"read_requests","type":{"kind":"array","length":32,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_key_validation_requests","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest","fields":[{"name":"public_key","type":{"kind":"struct","path":"authwit::aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"secret_key","type":{"kind":"struct","path":"authwit::aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey","fields":[{"name":"high","type":{"kind":"field"}},{"name":"low","type":{"kind":"field"}}]}}]}}},{"name":"new_commitments","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"encrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"encrypted_log_preimages_length","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"authwit::aztec::protocol_types::contrakt::deployment_data::ContractDeploymentData","fields":[{"name":"public_key","type":{"kind":"struct","path":"authwit::aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"kind":"struct","path":"authwit::aztec::protocol_types::contract_class::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]},"visibility":"public"},"return_witnesses":[182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388]},"bytecode":"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","debug_symbols":"7Z3dbtswDIXfxdfFIJISJfZVhl0U+wEGDO2w9q7ou8/LYtmptRDNAqdkdLUOkG1+J0bP18ZRn4cfD5/vnr4/3D8Ot89DjsPtx+fh8efd/Z//Pj7d/XoabsPN8PX+y/jvy83w7fuPr8Nt5Jeb1TKQnPcrQUTq4tJajFRwvxgjzYuBc+vUEDlO54aE5WD9p5shJ6uD82aDJ+Bp8JT5vwfPVgcvrcGRCaaLFGRlfIoi0zUoQazLmTa4ZcQ4QAnWAcA6AFoHIOsA0TpAsg7A1gGydQDrTVysN7FYb2Kx3sRivYnFehOL9SYW600s1ptYrDexWG9isd7EEKxXMQTrXQzBehlDsN7GEKzXMQTrfQzBeiFDsN7IEKxXMgTznQzmOxnMdzKY72Qw38lgvpPBfCeD+U4G850M5jsZzHcymu9kNN/JaL6T0Xwno/lORvOdjOY7Gc13MprvZDTfyWS+k8l8J5P5TibznUzmO5nMdzKZ72Qy38lkvpNp+04+71PuEM/RySnGmSCnJcHuGudozVRXt69xjl5Lhes1eBFu85UYsSJNyyMBrkai7UfKc0oxa8sZy34xc1zcGaFNG+qZE82rsXXfSU1G0vxSjQL4N5jYg2kHk3ow7WC4B9MOJvdg2sGUHkw7GOnBNINJoQfTDgZ6MO1gsAfTDsaX+ZYaTApwEMwONl4TrC9DVWB9WacC68skFVhfdqjA+jK+47Dsy+IUWF9mpsD6si0F1pVBJazbuKRY1rDxmmBdGZQG68qgNFhXBqXBujIoDdaVQSmw2ZVBabCuDEqDdWVQGqwvg8qlwi42wquw8ZpgfRmUAuvLoBRYXwalwPoyKAXWl0Edhy2+DEqB9WVQCqwvg1JgL2BQhedH6iTk88FS4LRfTBCWuhje/PbmWTbldBlM6sG0g+EeTDuY3INpB1N6MO1gpAfTDEZCD6YdDPRg2sFgD6YdTDfffwQTPQUDMdRgGA6C2cG6slkN1pWharCurFODdWWSGqwrOzwOi8GV8WmwrixOg3VlZhqsK9saf9yYYHHxmeAKG68J1pdBKbC+DEqB9WVQCqwvg1JgfRnUcVjwZVAKrC+DUmBdGRSmalCY1wYFrgxKg43XBOvKoDRYVwalwboyKA3WlUFpsK4MSoFFVwalwboyKIJpLzwiWhsUujIoDdaVQWmw8ZpgXRmUBuvKoDRYVwalwboyKA3WlUEpsOTKoDTYazIo2t6gkoTpYZ/x63gAuxuJLjBSff5ojPFwf+PdSHHzkThgXc6756BejbS9MzDOdymjwGokfn8jbd+/TKHulc2U1i/c9i05rphv74K4Gmn7LuNS33Afv5bXe2Vj3L5xWGC+l+Rw+W4kuMBIUnctz0FW99IFdhTPEOonsjKU9Qu3/XfvPLZYHWkc4PhyCdO5hZa/Pont27QOkuPhx88aq7Wd7PECu4obCie993Di9F1UclDCSYTTmVMMy9VwWjj8zsMpoX4ENAAfpPNp9zccPjSruMw33GKDDC7TQeWUg5p1BjIVzvi+xnyQ7P80w4f27xKPX2o8ik46Kp50VDrpKH7bUS8vvwE="},{"name":"transfer_public","function_type":"Open","is_internal":false,"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"authwit::aztec::abi::PublicContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"public_global_variables","type":{"kind":"struct","path":"authwit::aztec::abi::PublicGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},"visibility":"private"},{"name":"from","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"to","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"amount","type":{"kind":"field"},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"amount":[{"start":36,"end":37}],"from":[{"start":34,"end":35}],"inputs":[{"start":0,"end":34}],"nonce":[{"start":37,"end":38}],"to":[{"start":35,"end":36}]},"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"contract_storage_update_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"old_value","type":{"kind":"field"}},{"name":"new_value","type":{"kind":"field"}}]}}},{"name":"contract_storage_reads","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::contrakt::storage_read::StorageRead","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"current_value","type":{"kind":"field"}}]}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_commitments","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"prover_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]},"visibility":"public"},"return_witnesses":[38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240]},"bytecode":"","debug_symbols":""},{"name":"initialize","function_type":"Open","is_internal":true,"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"authwit::aztec::abi::PublicContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"public_global_variables","type":{"kind":"struct","path":"authwit::aztec::abi::PublicGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},"visibility":"private"},{"name":"new_admin","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"name","type":{"kind":"struct","path":"compressed_string::compressed_string::FieldCompressedString","fields":[{"name":"value","type":{"kind":"field"}}]},"visibility":"private"},{"name":"symbol","type":{"kind":"struct","path":"compressed_string::compressed_string::FieldCompressedString","fields":[{"name":"value","type":{"kind":"field"}}]},"visibility":"private"},{"name":"decimals","type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"private"}],"param_witnesses":{"decimals":[{"start":37,"end":38}],"inputs":[{"start":0,"end":34}],"name":[{"start":35,"end":36}],"new_admin":[{"start":34,"end":35}],"symbol":[{"start":36,"end":37}]},"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"contract_storage_update_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"old_value","type":{"kind":"field"}},{"name":"new_value","type":{"kind":"field"}}]}}},{"name":"contract_storage_reads","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::contrakt::storage_read::StorageRead","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"current_value","type":{"kind":"field"}}]}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_commitments","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"prover_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]},"visibility":"public"},"return_witnesses":[38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240]},"bytecode":"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","debug_symbols":""},{"name":"chooseWinner","function_type":"Open","is_internal":false,"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"authwit::aztec::abi::PublicContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"public_global_variables","type":{"kind":"struct","path":"authwit::aztec::abi::PublicGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},"visibility":"private"},{"name":"randomNumber","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"}],"param_witnesses":{"inputs":[{"start":0,"end":34}],"randomNumber":[{"start":34,"end":35}]},"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"contract_storage_update_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"old_value","type":{"kind":"field"}},{"name":"new_value","type":{"kind":"field"}}]}}},{"name":"contract_storage_reads","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::contrakt::storage_read::StorageRead","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"current_value","type":{"kind":"field"}}]}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_commitments","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"prover_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]},"visibility":"public"},"return_witnesses":[35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237]},"bytecode":"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","debug_symbols":""},{"name":"compute_note_hash_and_nullifier","function_type":"Unconstrained","is_internal":false,"abi":{"parameters":[{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"serialized_note","type":{"kind":"array","length":3,"type":{"kind":"field"}},"visibility":"private"}],"param_witnesses":{"contract_address":[{"start":0,"end":1}],"nonce":[{"start":1,"end":2}],"serialized_note":[{"start":3,"end":6}],"storage_slot":[{"start":2,"end":3}]},"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"},"return_witnesses":[6,7,8,9]},"bytecode":"","debug_symbols":""},{"name":"winner_chosen","function_type":"Unconstrained","is_internal":false,"abi":{"parameters":[],"param_witnesses":{},"return_type":{"abi_type":{"kind":"boolean"},"visibility":"public"},"return_witnesses":[0]},"bytecode":"H4sIAAAAAAAA/82UzU7DMAzHk36NtgjOHEA+cW4lHmC8Am9Q1IK4rFK3SfDyiAVi8SPktgxhqbJrO7bzd2xjjMnMF+Xmm6z5Sb3nK+jk8K293B1Dd11fuiCFiVJ1+EovN/DTui+hs6hT7e+p6uy68dz8xmgF7CRdrj7sgUDOgUfo18CeQRf22eF6C3sZOVNF8qnMnhSIGZ4lTiXusvZydxx94sRcgn/N16KO6g/q4VMW/Jf/JLfOccLZ6FzMsxPdqUbvBPVrvhw+N55feK569TM43wKXGjaNaxPiY4NaLHJrvgZyDV0T8eOcqo27KGFvexdX50YSxuXuIC4kgXzq2XWYtz7Wdjcvw/P0MA2jRWlFUCa5jVwjg45yHtE54uosoNMny7WbBbBwPXNEQkiTzmYWAJCbOMXAoe7a8yvP75dleJOXzTi9yrzfyfwkj/N+M27NBxpR32C2CAAA","debug_symbols":"zdXNCoJAFAXgd7lribk/zTi+SrSQfiAIi3Qn8+4VmS2UQEk6O4Vzvd/COdPS+bIrm9Olqqloya3WVGxaqq9l9Xyvm/LWUJGz+owO1f756DVldDydD1SYT9kgzI9EF2aO1odjHAlrkC5r/PlukLTNHhiPhAlImBwJE5Ew7KA0DKURKI1CaQxKA9XDDFXEDNXEDFXFDNXFAtXFsmgXv1bI8it0+RW2/Iof9Js4e68Q8d//DNbQezSXPszeOpBHAwU0UI4GimAgdWggRgPJH0HRjYAUDWRooNFjLz50U+pscNNqnD5jbsYMz5iRGTM6bSalOw=="},{"name":"balance_of_public","function_type":"Unconstrained","is_internal":false,"abi":{"parameters":[{"name":"owner","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"param_witnesses":{"owner":[{"start":0,"end":1}]},"return_type":{"abi_type":{"kind":"integer","sign":"unsigned","width":120},"visibility":"public"},"return_witnesses":[1]},"bytecode":"H4sIAAAAAAAA/81XzU7CQBDebcuPRQriyUSTfQKyJcaDesB496BPUEMxJkCTtsT68kYWZpLPteHCVpwEZjo7nfnm23baSiGEJ3bib35S/Bb2TUnrwyR2mEtLC+cT2R3wK1f1rvWkZZIEP3lhCYFLjmnTj9cl+TluAD4J2FuusWs9MfV9C7PdgwK7BXgC93jihvrUHeD8y13eG+aCxbd4OoX1NnDXaYA7CXU5N+6XqLH34fX+Ad4mr4eu+7yT/ibHCfDatfjFvkKyHV6PWlB9IwHUC6HuKdlSuJ25PehVAg6u50PMFekI1m1+eu73J94323oWXubo2HhCUf9c6QE29nnWuWbmPMJ6RLYHvgHZfk3uCHx9sgc15yJPEfQyJVsfJluesJaC4wh6lhbGY+Pp/CEe3h/O3bfwHLv2kGyX887kPWuopxHlalNuxs/1fIi5s/plvxG+l4ZwbMdhH5VwO5cRSwW1uV4I9gh85zVxPDd4rUvYeXY43NsY39mUw7ymD353Zdk3h/G9rYF3kdg8J/kaKcosT97S5zSZSYAWWDBR2587Rjzwoe3X+IyE0GYAPh5fLfB5Fi34CcHxXVHz2TglrQ+T7b3pUYGKtG8RgIJkeTVxl6TvSb/s9kAVi6xUWq02/8likX2ks7HCtUIt10WpijLJSzXPs6WKx5j3lvQF6Yc8Tz7V+2qWVipblyqbq9dsvZoV4hvZrl7Dcg8AAA==","debug_symbols":"1djBasJAEMbxd9lzKDOzs7O7eZXSg7QWBNFScwt591pMYkuCwWDwy01hNvM76D+wtdsf3zfV7ng4ubJ29GKufK3d6Wtz+P1+qjbflStjzFa47eHj/DFJbgr3udtvXanWFINhJuJ2mCn4fphJxqZZTbtxDpKu8xabt+JMinikhEfKeCQmQBMDmgTQ5AFNCmgKgCbAiDNgxRkw4wzYcQHsuAB2XAA7Lg/oOEvql6QwYaJ2lG4/1HLsAKz9aM6tWlepDqtU2yrVcZXqtEr19DvJ25TafK/O/1YMh32Udlb5msAoF40nKA1DaQRK46E0CqUJUBqD0kQoTYLSQLVYoVqsUC1WqBYrVIsVqsUK1WKFarFCtVihWqxQLQ6LtviygpdfIcuv8MuveEDfhPqrHRG7/cuIkrsH+z+XQKm9BAoBi2NYnIjFSVicDMUxwuLw0zhqIxzB4ngszugfXay7+/Kkg7eqpRln8v1nIs04wzPOyH1nmuYH"},{"name":"buy_Tickets","function_type":"Open","is_internal":false,"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"authwit::aztec::abi::PublicContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"public_global_variables","type":{"kind":"struct","path":"authwit::aztec::abi::PublicGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},"visibility":"private"},{"name":"current_year","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"},{"name":"current_month","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"},{"name":"current_day","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"},{"name":"birth_year","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"},{"name":"birth_month","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"},{"name":"birth_day","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"}],"param_witnesses":{"birth_day":[{"start":39,"end":40}],"birth_month":[{"start":38,"end":39}],"birth_year":[{"start":37,"end":38}],"current_day":[{"start":36,"end":37}],"current_month":[{"start":35,"end":36}],"current_year":[{"start":34,"end":35}],"inputs":[{"start":0,"end":34}]},"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"contract_storage_update_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"old_value","type":{"kind":"field"}},{"name":"new_value","type":{"kind":"field"}}]}}},{"name":"contract_storage_reads","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::contrakt::storage_read::StorageRead","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"current_value","type":{"kind":"field"}}]}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_commitments","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"prover_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]},"visibility":"public"},"return_witnesses":[40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242]},"bytecode":"","debug_symbols":""}],"events":[],"file_map":{"3":{"source":"struct BoundedVec<T, MaxLen> {\n    storage: [T; MaxLen],\n    // TODO: change this to return a u64 as Noir now\n    // uses u64 for indexing\n    len: Field,\n    empty_value: T,\n}\n\nimpl<T, MaxLen> BoundedVec<T, MaxLen> {\n    pub fn new(initial_value: T) -> Self {\n        BoundedVec { storage: [initial_value; MaxLen], len: 0, empty_value: initial_value }\n    }\n\n    pub fn get(mut self: Self, index: Field) -> T {\n        assert(index as u64 < self.len as u64);\n        self.storage[index]\n    }\n\n    pub fn get_unchecked(mut self: Self, index: Field) -> T {\n        self.storage[index]\n    }\n\n    pub fn push(&mut self, elem: T) {\n        assert(self.len as u64 < MaxLen as u64, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    pub fn len(self) -> Field {\n        self.len\n    }\n\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> Field {\n        MaxLen\n    }\n\n    // This is a intermediate method, while we don't have an\n    // .extend method\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    pub fn extend_from_array<Len>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len as u64 <= MaxLen as u64, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    pub fn extend_from_bounded_vec<Len>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len as u64 <= MaxLen as u64, \"extend_from_bounded_vec out of bounds\");\n\n        let mut exceeded_len = false;\n        for i in 0..Len {\n            exceeded_len |= i == append_len;\n            if !exceeded_len {\n                self.storage[self.len + (i as Field)] = vec.get_unchecked(i as Field);\n            }\n        }\n        self.len = new_len;\n    }\n\n    pub fn pop(&mut self) -> T {\n        assert(self.len as u64 > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = self.empty_value;\n        elem\n    }\n\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if (!exceeded_len) {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n}","path":"std/collections/bounded_vec.nr"},"19":{"source":"mod bn254;\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    pub fn to_le_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_le_bits(bit_size)\n    }\n    \n    pub fn to_be_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_be_bits(bit_size)\n    }\n\n    #[builtin(to_le_bits)]\n    fn __to_le_bits(self, _bit_size: u32) -> [u1] {}\n    \n    #[builtin(to_be_bits)]\n    fn __to_be_bits(self, bit_size: u32) -> [u1] {}\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    pub fn assert_max_bit_size(self: Self, bit_size: u32) {\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    pub fn to_le_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_le_radix(256, byte_size)\n    }\n\n    pub fn to_be_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_be_radix(256, byte_size)\n    }\n\n\n    pub fn to_le_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_le_radix(radix, result_len)\n    }\n\n    pub fn to_be_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_be_radix(radix, result_len)\n    }\n\n\n\n    // decompose `_self` into a `_result_len` vector over the `_radix` basis\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix(self, radix: u32, result_len: u32) -> [u8] {}\n    \n    #[builtin(to_be_radix)]\n    fn __to_be_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n}\n\n#[builtin(modulus_num_bits)]\npub fn modulus_num_bits() -> Field {}\n\n#[builtin(modulus_be_bits)]\npub fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub fn modulus_le_bytes() -> [u8] {}\n// Convert a 32 byte array to a field element\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let num_bytes = (modulus_num_bits() as u32 + 7) / 8;\n    let x_bytes = x.to_le_bytes(num_bytes);\n    let y_bytes = y.to_le_bytes(num_bytes);\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i] as u8;\n            let y_byte = y_bytes[num_bytes - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\n","path":"std/field.nr"},"31":{"source":"struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::unsafe::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<U, Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n","path":"std/option.nr"},"42":{"source":"use dep::aztec::{\n    protocol_types::{\n        address::AztecAddress,\n        constants::MAX_READ_REQUESTS_PER_CALL\n    },\n    note::{\n        note_header::NoteHeader,\n        note_interface::NoteInterface,\n        utils::compute_note_hash_for_consumption,\n    },\n    context::PrivateContext,\n    state_vars::set::Set,\n    log::emit_encrypted_log,\n    hash::pedersen_hash,\n};\nuse dep::aztec::oracle::{\n    rand::rand,\n    nullifier_key::get_nullifier_secret_key,\n    get_public_key::get_public_key,\n};\nuse dep::safe_math::SafeU120;\nuse dep::std::option::Option;\n\ntrait OwnedNote {\n    fn new(amount: SafeU120, owner: AztecAddress) -> Self;\n    fn get_amount(self) -> SafeU120;\n    fn get_owner(self) -> AztecAddress;\n}\n\nglobal TOKEN_NOTE_LEN: Field = 3; // 3 plus a header.\n\nstruct TokenNote {\n    // the amount of tokens in the note\n    amount: SafeU120,\n    // the provider of secrets for the nullifier. The owner (recipient) to ensure that the note \n    // can be privately spent. When nullifier secret and encryption private key is same \n    // we can simply use the owner for this one.\n    owner: AztecAddress,\n    // randomness of the note to hide contents.\n    randomness: Field,\n    // the note header (contract_address, nonce, storage_slot)\n    // included in the note such that it becomes part of encrypted logs for later use.\n    header: NoteHeader,\n}\n\nimpl NoteInterface<TOKEN_NOTE_LEN> for TokenNote {\n    fn serialize_content(self) -> [Field; TOKEN_NOTE_LEN] {\n        [self.amount.value as Field, self.owner.to_field(), self.randomness]\n    }\n\n    fn deserialize_content(serialized_note: [Field; TOKEN_NOTE_LEN]) -> Self {\n        Self {\n            amount: SafeU120::new(serialized_note[0]),\n            owner: AztecAddress::from_field(serialized_note[1]),\n            randomness: serialized_note[2],\n            header: NoteHeader::empty(),\n        }\n    }\n\n    fn compute_note_content_hash(self) -> Field {\n        // TODO(#1205) Should use a non-zero generator index.\n        pedersen_hash(self.serialize_content(), 0)\n    }\n\n    // docs:start:nullifier\n    fn compute_nullifier(self, context: &mut PrivateContext) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_consumption(self);\n        let secret = context.request_nullifier_secret_key(self.owner);\n        // TODO(#1205) Should use a non-zero generator index.\n        pedersen_hash([\n            note_hash_for_nullify,\n            secret.low,\n            secret.high,\n        ],0)\n    }\n    // docs:end:nullifier\n\n    fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_consumption(self);\n        let secret = get_nullifier_secret_key(self.owner);\n        // TODO(#1205) Should use a non-zero generator index.\n        pedersen_hash([\n            note_hash_for_nullify,\n            secret.low,\n            secret.high,\n        ],0)\n    }\n\n    fn set_header(&mut self, header: NoteHeader) {\n        self.header = header;\n    }\n\n    fn get_header(self) -> NoteHeader {\n        self.header\n    }\n\n    // Broadcasts the note as an encrypted log on L1.\n    fn broadcast(self, context: &mut PrivateContext, slot: Field) {\n      // We only bother inserting the note if non-empty to save funds on gas.\n      if !self.amount.is_zero() {\n          let encryption_pub_key = get_public_key(self.owner);\n          emit_encrypted_log(\n              context,\n              (*context).this_address(),\n              slot,\n              encryption_pub_key,\n              self.serialize_content(),\n          );\n      }\n  }\n}\n\nimpl OwnedNote for TokenNote {\n    fn new(amount: SafeU120, owner: AztecAddress) -> Self {\n        Self {\n            amount,\n            owner,\n            randomness: rand(),\n            header: NoteHeader::empty(),\n        }\n    }\n\n    fn get_amount(self) -> SafeU120 {\n        self.amount\n    }\n\n    fn get_owner(self) -> AztecAddress {\n        self.owner\n    }\n   \n}\n","path":"/Users/sangjun/Documents/GitHub/Lottery/src/types/token_note.nr"},"44":{"source":"// docs:start:token_types_all\nuse dep::aztec::{\n    note::{\n        note_header::NoteHeader,\n        note_interface::NoteInterface,\n        utils::compute_note_hash_for_consumption,\n    },\n    hash::{compute_secret_hash, pedersen_hash},\n    context::PrivateContext,\n};\n\nglobal TRANSPARENT_NOTE_LEN: Field = 2;\n\n// Transparent note represents a note that is created in the clear (public execution),\n// but can only be spent by those that know the preimage of the \"secret_hash\"\nstruct TransparentNote {\n    amount: Field,\n    secret_hash: Field,\n    // the secret is just here for ease of use and won't be (de)serialized\n    secret: Field,\n    // header is just here to satisfy the NoteInterface\n    header: NoteHeader,\n}\n\nimpl NoteInterface<TRANSPARENT_NOTE_LEN> for TransparentNote {\n    fn serialize_content(self) -> [Field; TRANSPARENT_NOTE_LEN] {\n        [self.amount, self.secret_hash]\n    }\n\n    fn deserialize_content(serialized_note: [Field; TRANSPARENT_NOTE_LEN]) -> Self {\n        TransparentNote {\n            amount: serialized_note[0],\n            secret_hash: serialized_note[1],\n            secret: 0,\n            header: NoteHeader::empty(),\n        }\n    }\n\n    fn compute_note_content_hash(self) -> Field {\n        // TODO(#1205) Should use a non-zero generator index.\n        pedersen_hash(self.serialize_content(), 0)\n    }\n\n    fn compute_nullifier(self, _context: &mut PrivateContext) -> Field {\n        self.compute_nullifier_without_context()\n    }\n\n    fn compute_nullifier_without_context(self) -> Field {\n        let siloed_note_hash = compute_note_hash_for_consumption(self);\n        // TODO(#1205) Should use a non-zero generator index.\n        pedersen_hash([self.secret, siloed_note_hash],0)\n    }\n\n    fn set_header(&mut self, header: NoteHeader) {\n        self.header = header;\n    }\n\n    fn get_header(self) -> NoteHeader {\n        self.header\n    }\n\n    fn broadcast(self, context: &mut PrivateContext, slot: Field) {\n        assert(false, \"TransparentNote does not support broadcast\");\n    }\n}\n\nimpl TransparentNote {\n\n    // CONSTRUCTORS\n\n    pub fn new(amount: Field, secret_hash: Field) -> Self {\n        TransparentNote {\n            amount: amount,\n            secret_hash: secret_hash,\n            secret: 0,\n            header: NoteHeader::empty(),\n        }\n    }\n\n    // new oracle call primitive\n    // get me the secret corresponding to this hash\n    pub fn new_from_secret(amount: Field, secret: Field) -> Self {\n        TransparentNote {\n            amount: amount,\n            secret_hash: compute_secret_hash(secret),\n            secret: secret,\n            header: NoteHeader::empty(),\n        }\n    }\n\n    // CUSTOM FUNCTIONS FOR THIS NOTE TYPE\n\n    pub fn knows_secret(self, secret: Field) {\n        let hash = compute_secret_hash(secret);\n        assert(self.secret_hash == hash);\n    }\n}\n// docs:end:token_types_all\n","path":"/Users/sangjun/Documents/GitHub/Lottery/src/types/transparent_note.nr"},"46":{"source":"mod types;\n\ncontract Token {\n    // Libs\n    use dep::std::option::Option;\n\n    use dep::safe_math::SafeU120;\n    use dep::compressed_string::FieldCompressedString;\n    use dep::aztec::log::emit_unencrypted_log;\n\n    use dep::value_note::{\n            balance_utils,\n            value_note::{\n                ValueNote,\n                VALUE_NOTE_LEN,\n            },\n    };\n    \n    use dep::aztec::{\n        note::{\n            note_getter_options::NoteGetterOptions,\n            note_header::NoteHeader,\n            utils as note_utils,\n        },\n        context::{PrivateContext, PublicContext, Context},\n        hash::{compute_secret_hash},\n        state_vars::{map::Map, public_state::PublicState, stable_public_state::StablePublicState,  set::Set},\n        protocol_types::{\n            abis::function_selector::FunctionSelector,\n            address::AztecAddress\n        }\n    };\n\n    use dep::easy_private_state::easy_private_state::EasyPrivateUint;\n\n\n    // docs:start:import_authwit\n    use dep::authwit::{\n        auth::{\n            assert_current_call_valid_authwit,\n            assert_current_call_valid_authwit_public,\n        },\n    };\n    // docs:end:import_authwit\n\n    use crate::types::{\n        transparent_note::TransparentNote,\n        token_note::{TokenNote, TOKEN_NOTE_LEN},\n        balances_map::BalancesMap\n    };\n    // docs:end::imports\n\n    // docs:start:storage_struct\n    struct Storage {\n        // docs:start:storage_admin\n        admin: PublicState<AztecAddress>,\n        // docs:end:storage_admin\n        // docs:start:storage_minters\n        minters: Map<AztecAddress, PublicState<bool>>, \n        //private balance\n        balances: Map<AztecAddress, EasyPrivateUint>,\n        total_supply: PublicState<SafeU120>, \n        pending_shields: Set<TransparentNote>, \n        public_balances: Map<AztecAddress, PublicState<SafeU120>>,\n        symbol: StablePublicState<FieldCompressedString>,\n        name: StablePublicState<FieldCompressedString>,\n        decimals: StablePublicState<u8>,\n        players_registry: Map<Field, PublicState<AztecAddress>>,\n        player_registered:  Map<AztecAddress, PublicState<bool>>,\n        counter: PublicState<Field>,\n        winnerChosen: PublicState<bool>,\n        lastTimeStamp: PublicState<SafeU120>\n    }\n    #[aztec(private)]\n    fn constructor(admin: AztecAddress, name: str<31>, symbol: str<31>, decimals: u8) {\n        let selector = FunctionSelector::from_signature(\"initialize((Field),(Field),(Field),u8)\");\n        let name_s = FieldCompressedString::from_string(name);\n        let symbol_s = FieldCompressedString::from_string(symbol);\n        context.call_public_function(\n            context.this_address(),\n            selector,\n            [admin.to_field(), name_s.serialize()[0], symbol_s.serialize()[0], decimals as Field]\n        );\n    }\n\n    #[aztec(public)]\n    fn buy_Tickets(\n        current_year: u64,\n        current_month: u64,\n        current_day: u64,\n        birth_year: u64,\n        birth_month: u64,\n        birth_day: u64\n    ) {\n        let age = current_year - birth_year;\n        assert(age >= 18, \"you are not over 18\");\n        assert(age <= 100, \"you are too old\");\n        assert(\n            (storage.player_registered.at(context.msg_sender()).read()) == false, \"you already have a ticket\"\n        );\n\n        let mut counter = (storage.counter.read());\n        //update mapping(counter => address) so that later the admin can choose the counter that will win the lottery.\n        storage.players_registry.at(counter).write(context.msg_sender());\n        storage.counter.write(counter + 1);\n\n        //update state so check whether an address is already resgistered in a lottery or not\n        storage.player_registered.at(context.msg_sender()).write(true);\n    }\n\n    #[aztec(public)]\n    fn chooseWinner(randomNumber: u32) {\n        //msg.sender should be the admin\n        assert(context.msg_sender() == storage.admin.read(), \"msg_sender not admin\");\n        //if the winner storage value is already filled, this function should revert. \n        assert(storage.winnerChosen.read() == false, \"winner already chosen\");\n\n        let calculate_winner_index = |randomNumber: u32, totalEntries: u32| -> u32 {\n            randomNumber & (totalEntries - 1)\n        };\n\n        let randomInt: u32 = randomNumber;\n        let totalEntries: u32 = storage.counter.read() as u32;\n\n        assert(totalEntries != 0, \"totalEntries cannot be zero\");\n        let power_of_two_check: u32 = totalEntries & (totalEntries - 1);\n\n        assert(power_of_two_check == 0, \"totalEntries must be a power of two\");\n\n        let winnerIndex: u32 = calculate_winner_index(randomInt, totalEntries);\n\n        //once the winner is decided, the public state 'winner' will have an aztec address filled.\n        storage.winnerChosen.write(true);\n        //the winner's balance will go up.\n        let winnerIndexField = winnerIndex as Field;\n        storage.public_balances.at(storage.players_registry.at(winnerIndexField).read()).write(\n            storage.public_balances.at(storage.players_registry.at(winnerIndexField).read()).read().add(SafeU120::new(10000))\n        );\n    }\n\n    #[aztec(public)]\n    fn transfer_public(from: AztecAddress, to: AztecAddress, amount: Field, nonce: Field) {\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit_public(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n\n        let amount = SafeU120::new(amount);\n        let from_balance = storage.public_balances.at(from).read().sub(amount);\n        storage.public_balances.at(from).write(from_balance);\n\n        let to_balance = storage.public_balances.at(to).read().add(amount);\n        storage.public_balances.at(to).write(to_balance);\n    }\n\n    #[aztec(public)]\n       internal  fn initialize(\n        new_admin: AztecAddress,\n        name: FieldCompressedString,\n        symbol: FieldCompressedString,\n        decimals: u8\n    ) {\n        assert(!new_admin.is_zero(), \"invalid admin\");\n        storage.admin.write(new_admin);\n        storage.minters.at(new_admin).write(true);\n        storage.name.initialize(name);\n        storage.symbol.initialize(symbol);\n        storage.decimals.initialize(decimals);\n        storage.lastTimeStamp.write(SafeU120::new(1));\n    }\n\n    #[aztec(private)]\n    fn chooseWinner_private(randomNumber: u32) {\n        //msg.sender should be the admin\n        assert(context.msg_sender() == storage.admin.read(), \"msg_sender not admin\");\n        //if the winner storage value is already filled, this function should revert. \n        assert(storage.winnerChosen.read() == false, \"winner already chosen\");\n\n        let calculate_winner_index = |randomNumber: u32, totalEntries: u32| -> u32 {\n            randomNumber & (totalEntries - 1)\n        };\n\n        let randomInt: u32 = randomNumber;\n        let totalEntries: u32 = storage.counter.read() as u32;\n\n        assert(totalEntries != 0, \"totalEntries cannot be zero\");\n        let power_of_two_check: u32 = totalEntries & (totalEntries - 1);\n\n        assert(power_of_two_check == 0, \"totalEntries must be a power of two\");\n\n        let winnerIndex: u32 = calculate_winner_index(randomInt, totalEntries);\n\n        //once the winner is decided, the public state 'winner' will have an aztec address filled.\n        storage.winnerChosen.write(true);\n        //the winner's balance will go up.\n        let winnerIndexField = winnerIndex as Field;\n        let balances = storage.balances;\n        let winnerAddress = storage.players_registry.at(winnerIndexField).read();\n        let amount: u120 = 10000;\n        balances.at(winnerAddress).add(amount, winnerAddress);\n    }\n\n    unconstrained fn balance_of_public(owner: AztecAddress) -> pub u120 {\n        storage.public_balances.at(owner).read().value\n    }\n\n    unconstrained fn getBalance(owner: AztecAddress) -> pub Field {\n        let balances = storage.balances;\n\n        // Return the sum of all notes in the set.\n        balance_utils::get_balance(balances.at(owner).set)\n    }\n\n    unconstrained fn winner_chosen() -> pub bool {\n        storage.winnerChosen.read()\n    }\n\n    unconstrained fn compute_note_hash_and_nullifier(\n        contract_address: AztecAddress,\n        nonce: Field,\n        storage_slot: Field,\n        serialized_note: [Field; TOKEN_NOTE_LEN]\n    ) -> pub [Field; 4] {\n        let note_header = NoteHeader::new(contract_address, nonce, storage_slot);\n        if (storage_slot == storage.pending_shields.get_storage_slot()) {\n            note_utils::compute_note_hash_and_nullifier(\n                TransparentNote::deserialize_content,\n                note_header,\n                serialized_note\n            )\n        } else {\n            note_utils::compute_note_hash_and_nullifier(TokenNote::deserialize_content, note_header, serialized_note)\n        }\n    }\n}\n\n","path":"/Users/sangjun/Documents/GitHub/Lottery/src/main.nr"},"48":{"source":"use dep::aztec::protocol_types::{\n    abis::function_selector::FunctionSelector,\n    address::AztecAddress,\n    constants::{\n        GENERATOR_INDEX__SIGNATURE_PAYLOAD,\n    },\n    hash::{\n        hash_args,\n        pedersen_hash,\n    },\n};\nuse dep::aztec::context::{\n    PrivateContext,\n    PublicContext,\n    Context,\n};\n\nglobal IS_VALID_SELECTOR = 0xe86ab4ff;\nglobal IS_VALID_PUBLIC_SELECTOR = 0xf3661153;\n\n// @todo #2676 Should use different generator than the payload to limit probability of collisions.\n\n// docs:start:assert_valid_authwit\n// Assert that `on_behalf_of` have authorized `message_hash` with a valid authentication witness\npub fn assert_valid_authwit(\n    context: &mut PrivateContext,\n    on_behalf_of: AztecAddress,\n    message_hash: Field\n) {\n    let is_valid_selector = FunctionSelector::from_field(IS_VALID_SELECTOR);\n    let result = context.call_private_function(on_behalf_of, is_valid_selector, [message_hash])[0];\n    context.push_new_nullifier(message_hash, 0);\n    assert(result == IS_VALID_SELECTOR, \"Message not authorized by account\");\n}\n// docs:end:assert_valid_authwit\n\n// docs:start:assert_current_call_valid_authwit\n// Assert that `on_behalf_of` have authorized the current call with a valid authentication witness\npub fn assert_current_call_valid_authwit(context: &mut PrivateContext, on_behalf_of: AztecAddress) {\n    // message_hash = H(caller, contract_this, selector, args_hash)\n    let message_hash = pedersen_hash(\n        [\n        context.msg_sender().to_field(), context.this_address().to_field(), context.selector().to_field(), context.args_hash\n    ],\n        GENERATOR_INDEX__SIGNATURE_PAYLOAD\n    );\n    assert_valid_authwit(context, on_behalf_of, message_hash);\n}\n// docs:end:assert_current_call_valid_authwit\n\n// docs:start:assert_valid_authwit_public\n// Assert that `on_behalf_of` have authorized `message_hash` in a public context\npub fn assert_valid_authwit_public(context: &mut PublicContext, on_behalf_of: AztecAddress, message_hash: Field) {\n    let is_valid_public_selector = FunctionSelector::from_field(IS_VALID_PUBLIC_SELECTOR);\n    let result = context.call_public_function(on_behalf_of, is_valid_public_selector, [message_hash])[0];\n    context.push_new_nullifier(message_hash, 0);\n    assert(result == IS_VALID_SELECTOR, \"Message not authorized by account\");\n}\n// docs:end:assert_valid_authwit_public\n\n// docs:start:assert_current_call_valid_authwit_public\n// Assert that `on_behalf_of` have authorized the current call in a public context\npub fn assert_current_call_valid_authwit_public(context: &mut PublicContext, on_behalf_of: AztecAddress) {\n    // message_hash = H(caller, contract_this, selector, args_hash)\n    let message_hash = pedersen_hash(\n        [\n        context.msg_sender().to_field(), context.this_address().to_field(), context.selector().to_field(), context.args_hash\n    ],\n        GENERATOR_INDEX__SIGNATURE_PAYLOAD\n    );\n    assert_valid_authwit_public(context, on_behalf_of, message_hash);\n}\n// docs:end:assert_current_call_valid_authwit_public\n\n// docs:start:compute_authwit_message_hash\n// Compute the message hash to be used by an authentication witness \npub fn compute_authwit_message_hash<N>(\n    caller: AztecAddress,\n    target: AztecAddress,\n    selector: FunctionSelector,\n    args: [Field; N]\n) -> Field {\n    let args_hash = hash_args(args);\n    pedersen_hash(\n        [caller.to_field(), target.to_field(), selector.to_field(), args_hash],\n        GENERATOR_INDEX__SIGNATURE_PAYLOAD\n    )\n}\n// docs:end:compute_authwit_message_hash\n","path":"/Users/sangjun/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.23.0/yarn-project/aztec-nr/authwit/src/auth.nr"},"52":{"source":"use crate::context::{PrivateContext, PublicContext};\nuse crate::oracle;\nuse dep::protocol_types::{\n    address::AztecAddress,\n    grumpkin_point::GrumpkinPoint,\n};\n\npub fn emit_encrypted_log<N>(\n    context: &mut PrivateContext,\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    encryption_pub_key: GrumpkinPoint,\n    log: [Field; N]\n) {\n    let _ = oracle::logs::emit_encrypted_log(contract_address, storage_slot, encryption_pub_key, log);\n    context.accumulate_encrypted_logs(log);\n}\n\npub fn emit_unencrypted_log<T>(context: &mut PublicContext, log: T) {\n    let contract_address = context.this_address();\n    let event_selector = 5; // TODO: compute actual event selector.\n    let _ = oracle::logs::emit_unencrypted_log(contract_address, event_selector, log);\n    // context.accumulate_unencrypted_logs(log);\n}\n\n// TODO: We might want to remove this since emitting unencrypted logs from private functions is violating privacy.\n// --> might be a better approach to force devs to make a public function call that emits the log if needed then\n// it would be less easy to accidentally leak information.\n// If we decide to keep this function around would make sense to wait for traits and then merge it with emit_unencrypted_log.\npub fn emit_unencrypted_log_from_private<T>(context: &mut PrivateContext, log: T) {\n    let contract_address = context.this_address();\n    let event_selector = 5; // TODO: compute actual event selector.\n    let _ = oracle::logs::emit_unencrypted_log(contract_address, event_selector, log);\n    // context.accumulate_unencrypted_logs(log);\n}\n","path":"/Users/sangjun/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.23.0/yarn-project/aztec-nr/aztec/src/log.nr"},"55":{"source":"use dep::std::option::Option;\nuse dep::protocol_types::{\n    constants::{\n        MAX_READ_REQUESTS_PER_CALL,\n        GET_NOTE_ORACLE_RETURN_LENGTH,\n        GET_NOTES_ORACLE_RETURN_LENGTH,\n        MAX_NOTES_PER_PAGE,\n        VIEW_NOTE_ORACLE_RETURN_LENGTH,\n    },\n};\nuse crate::context::PrivateContext;\nuse crate::note::{\n    note_getter_options::{NoteGetterOptions, Select, Sort, SortOrder, Comparator, NoteStatus},\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_consumption,\n};\nuse crate::oracle;\n\nfn check_note_header<Note, N>(\n    context: PrivateContext,\n    storage_slot: Field,\n    note: Note\n) where Note: NoteInterface<N> {\n    let header = note.get_header();\n    let contract_address = context.this_address();\n    assert(header.contract_address.eq(contract_address));\n    assert(header.storage_slot == storage_slot);\n}\n\nfn check_note_fields<N>(fields: [Field; N], selects: BoundedVec<Option<Select>, N>) {\n    for i in 0..selects.len {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n\n        // Values are computed ahead of time because circuits evaluate all branches\n        let isEqual = fields[select.field_index] == select.value;\n        let isLt = fields[select.field_index].lt(select.value);\n\n        if (select.comparator == Comparator.EQ) {\n            assert(isEqual, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.NEQ) {\n            assert(!isEqual, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.LT) {\n            assert(isLt, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.LTE) {\n            assert(isLt | isEqual, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.GT) {\n            assert(!isLt & !isEqual, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.GTE) {\n            assert(!isLt, \"Mismatch return note field.\");\n        }\n    }\n}\n\nfn check_notes_order<N>(\n    fields_0: [Field; N],\n    fields_1: [Field; N],\n    sorts: BoundedVec<Option<Sort>, N>\n) {\n    for i in 0..sorts.len {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let eq = fields_0[sort.field_index] == fields_1[sort.field_index];\n        let lt = fields_0[sort.field_index] as u120 < fields_1[sort.field_index] as u120;\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field\n) -> Note where Note: NoteInterface<N> {\n    let note = get_note_internal(storage_slot);\n\n    check_note_header(*context, storage_slot, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_consumption(note);\n\n    context.push_read_request(note_hash_for_read_request);\n    note\n}\n\npub fn get_notes<Note, N, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>\n) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] where Note: NoteInterface<N> {\n    let opt_notes = get_notes_internal(storage_slot, options);\n    let mut num_notes = 0;\n    let mut prev_fields = [0; N];\n    for i in 0..opt_notes.len() {\n        let opt_note = opt_notes[i];\n        if opt_note.is_some() {\n            let note = opt_note.unwrap_unchecked();\n            let fields = note.serialize_content();\n            check_note_header(*context, storage_slot, note);\n            check_note_fields(fields, options.selects);\n            if i != 0 {\n                check_notes_order(prev_fields, fields, options.sorts);\n            }\n            prev_fields = fields;\n\n            let note_hash_for_read_request = compute_note_hash_for_consumption(note);\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n            // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n            context.push_read_request(note_hash_for_read_request);\n\n            num_notes += 1;\n        };\n    }\n    if options.limit != 0 {\n        assert(num_notes <= options.limit, \"Invalid number of return notes.\");\n    }\n    opt_notes\n}\n\nunconstrained fn get_note_internal<Note, N>(storage_slot: Field) -> Note where Note: NoteInterface<N> {\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n    oracle::notes::get_notes(\n        storage_slot,\n        0,\n        [],\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        NoteStatus.ACTIVE,\n        placeholder_note,\n        placeholder_fields,\n        placeholder_note_length\n    )[0].unwrap() // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, N, FILTER_ARGS>(\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>\n) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] where Note: NoteInterface<N> {\n    let (num_selects, select_by, select_values, select_comparators, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by,\n        select_values,\n        select_comparators,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length\n    );\n\n    let filter = options.filter;\n    let filter_args = options.filter_args;\n    filter(opt_notes, filter_args)\n}\n\nunconstrained pub fn view_notes<Note, N>(\n    storage_slot: Field,\n    options: NoteViewerOptions<Note, N>\n) -> [Option<Note>; MAX_NOTES_PER_PAGE] where Note: NoteInterface<N> {\n    let (num_selects, select_by, select_values, select_comparators, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n    oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by,\n        select_values,\n        select_comparators,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length\n    )\n}\n\nunconstrained fn flatten_options<Note, N>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>\n) -> (u8, [u8; N], [Field; N], [u3; N], [u8; N], [u2; N]) {\n    let mut num_selects = 0;\n    let mut select_by = [0; N];\n    let mut select_values = [0; N];\n    let mut select_comparators = [0; N];\n\n    for i in 0..selects.len {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by[num_selects] = select.unwrap_unchecked().field_index;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            select_comparators[num_selects] = select.unwrap_unchecked().comparator;\n            num_selects += 1;\n        };\n    }\n\n    let mut sort_by = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by[i] = sort.unwrap_unchecked().field_index;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    }\n\n    (num_selects, select_by, select_values, select_comparators, sort_by, sort_order)\n}\n","path":"/Users/sangjun/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.23.0/yarn-project/aztec-nr/aztec/src/note/note_getter.nr"},"56":{"source":"use crate::context::{\n    PrivateContext,\n    PublicContext,\n};\nuse crate::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n    utils::{compute_note_hash_for_insertion, compute_note_hash_for_consumption},\n};\nuse crate::oracle::notes::{notify_created_note, notify_nullified_note};\n\npub fn create_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note,\n    broadcast: bool\n) where Note: NoteInterface<N> {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, is_transient: true };\n    // TODO: change this to note.setHeader(header) once https://github.com/noir-lang/noir/issues/4095 is fixed\n    Note::set_header(note, header);\n    // As `is_transient` is true, this will compute the inner note hsah\n    let inner_note_hash = compute_note_hash_for_insertion(*note);\n\n    // TODO: Strong typing required because of https://github.com/noir-lang/noir/issues/4088\n    let serialized_note: [Field; N] = Note::serialize_content(*note);\n    assert(notify_created_note(storage_slot, serialized_note, inner_note_hash) == 0);\n\n    context.push_new_note_hash(inner_note_hash);\n\n    if broadcast {\n        Note::broadcast(*note, context, storage_slot);\n    }\n}\n\npub fn create_note_hash_from_public<Note, N>(context: &mut PublicContext, storage_slot: Field, note: &mut Note) where Note: NoteInterface<N> {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, is_transient: true };\n    // TODO: change this to note.setHeader(header) once https://github.com/noir-lang/noir/issues/4095 is fixed\n    Note::set_header(note, header);\n    let inner_note_hash = compute_note_hash_for_insertion(*note);\n\n    context.push_new_note_hash(inner_note_hash);\n}\n\npub fn destroy_note<Note, N>(context: &mut PrivateContext, note: Note) where Note: NoteInterface<N> {\n    let mut nullifier = 0;\n    let mut consumed_note_hash: Field = 0;\n    nullifier = note.compute_nullifier(context);\n\n    // We also need the note hash corresponding to the \"nullifier\"\n    let header = note.get_header();\n    // `consumed_note_hash` is used to inform the kernel which pending note hash\n    // the nullifier corresponds to so they can be matched and both squashed/deleted.\n    // nonzero nonce implies \"persistable\" nullifier (nullifies a persistent/in-tree\n    // note hash) in which case `consumed_note_hash` is not used since the kernel\n    // just siloes and forwards the nullifier to its output.\n    if (header.is_transient) {\n        // TODO(1718): Can we reuse the note hash computed in `compute_nullifier`?\n        consumed_note_hash = compute_note_hash_for_consumption(note);\n    }\n    assert(notify_nullified_note(nullifier, consumed_note_hash) == 0);\n\n    context.push_new_nullifier(nullifier, consumed_note_hash)\n}\n","path":"/Users/sangjun/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.23.0/yarn-project/aztec-nr/aztec/src/note/lifecycle.nr"},"57":{"source":"use crate::{\n    context::PrivateContext,\n    note::{\n        note_header::NoteHeader,\n        note_interface::NoteInterface,\n    },\n    utils::arr_copy_slice,\n};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::{\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n        GENERATOR_INDEX__UNIQUE_COMMITMENT,\n        GENERATOR_INDEX__SILOED_COMMITMENT,\n    },\n    hash::pedersen_hash,\n};\n\nfn compute_siloed_hash(contract_address: AztecAddress, inner_note_hash: Field) -> Field {\n    let inputs = [contract_address.to_field(), inner_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__SILOED_COMMITMENT)\n}\n\nfn compute_unique_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__UNIQUE_COMMITMENT)\n}\n\nfn compute_inner_note_hash<Note, N>(note: Note) -> Field where Note: NoteInterface<N> {\n    let header = note.get_header();\n    let note_hash = note.compute_note_content_hash();\n\n    // TODO(#1205) Do we need a generator index here?\n    pedersen_hash([header.storage_slot, note_hash], 0)\n}\n\nfn compute_siloed_note_hash<Note, N>(note_with_header: Note) -> Field where Note: NoteInterface<N> {\n    let header = note_with_header.get_header();\n\n    let inner_note_hash = compute_inner_note_hash(note_with_header);\n\n    compute_siloed_hash(header.contract_address, inner_note_hash)\n}\n\nfn compute_unique_siloed_note_hash<Note, N>(note_with_header: Note) -> Field where Note: NoteInterface<N> {\n    let header = note_with_header.get_header();\n\n    let siloed_note_hash = compute_siloed_note_hash(note_with_header);\n\n    compute_unique_hash(header.nonce, siloed_note_hash)\n}\n\npub fn compute_siloed_nullifier<Note, N>(\n    note_with_header: Note,\n    context: &mut PrivateContext\n) -> Field where Note: NoteInterface<N> {\n    let header = note_with_header.get_header();\n    let inner_nullifier = note_with_header.compute_nullifier(context);\n\n    let input = [header.contract_address.to_field(), inner_nullifier];\n    pedersen_hash(input, GENERATOR_INDEX__OUTER_NULLIFIER)\n}\n\npub fn compute_note_hash_for_insertion<Note, N>(note: Note) -> Field where Note: NoteInterface<N> {\n    compute_inner_note_hash(note)\n}\n\npub fn compute_note_hash_for_consumption<Note, N>(note: Note) -> Field where Note: NoteInterface<N> {\n    let header = note.get_header();\n    // There are 3 cases for reading a note intended for consumption:\n    // 1. The note was inserted in this transaction, and is transient.\n    // 2. The note was inserted in a previous transaction, and was inserted in public\n    // 3. The note was inserted in a previous transaction, and was inserted in private\n\n    if (header.is_transient) {\n        // If a note is transient, we just read the inner_note_hash (kernel will silo by contract address).\n        compute_inner_note_hash(note)\n    } else if (header.nonce == 0) {\n        // If not transient and nonce is zero, that means we are reading a public note.\n        compute_siloed_note_hash(note)\n    } else {\n        // When nonce is nonzero, that means we are reading a settled note (from tree) created in a\n        // previous TX. So we need the unique_siloed_note_hash which has already been hashed with\n        // contract address and then nonce. This hash will match the existing leaf in the private\n        // data tree, so the kernel can just perform a membership check directly on this hash/leaf.\n        compute_unique_siloed_note_hash(note)\n    }\n}\n\npub fn compute_note_hash_and_nullifier<T, N, S>(\n    deserialize_content: fn([Field; N]) -> T,\n    note_header: NoteHeader,\n    serialized_note: [Field; S]\n) -> [Field; 4] where T: NoteInterface<N> {\n    let mut note = deserialize_content(arr_copy_slice(serialized_note, [0; N], 0));\n    // TODO: change this to note.setHeader(header) once https://github.com/noir-lang/noir/issues/4095 is fixed\n    T::set_header((&mut note), note_header);\n\n    let inner_note_hash = compute_inner_note_hash(note);\n\n    let siloed_note_hash = compute_siloed_hash(note_header.contract_address, inner_note_hash);\n\n    let unique_siloed_note_hash = compute_unique_hash(note_header.nonce, siloed_note_hash);\n\n    let inner_nullifier = note.compute_nullifier_without_context();\n\n    [inner_note_hash, siloed_note_hash, unique_siloed_note_hash, inner_nullifier]\n}\n","path":"/Users/sangjun/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.23.0/yarn-project/aztec-nr/aztec/src/note/utils.nr"},"61":{"source":"use crate::{\n    abi::PublicContextInputs,\n    messaging::process_l1_to_l2_message,\n    oracle::{\n        arguments,\n        public_call::call_public_function_internal,\n    },\n};\nuse dep::protocol_types::{\n    abis::{\n        global_variables::GlobalVariables,\n        function_selector::FunctionSelector,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        public_call_stack_item::PublicCallStackItem,\n        public_circuit_public_inputs::PublicCircuitPublicInputs,\n        side_effect::{SideEffect, SideEffectLinkedToNoteHash},\n    },\n    address::{\n        AztecAddress,\n        EthAddress,\n    },\n    constants::{\n        MAX_NEW_COMMITMENTS_PER_CALL,\n        MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n        MAX_NEW_NULLIFIERS_PER_CALL,\n        MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n        MAX_PUBLIC_DATA_READS_PER_CALL,\n        MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n        MAX_READ_REQUESTS_PER_CALL,\n        NUM_FIELDS_PER_SHA256,\n        RETURN_VALUES_LENGTH,\n    },\n    contrakt::{\n        storage_read::StorageRead,\n        storage_update_request::StorageUpdateRequest,\n    },\n    hash::hash_args,\n    header::Header,\n    utils::reader::Reader,\n};\n\nstruct PublicContext {\n    inputs: PublicContextInputs,\n    side_effect_counter: u32,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    contract_storage_update_requests: BoundedVec<StorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_reads: BoundedVec<StorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack_hashes: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_commitments: BoundedVec<SideEffect, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<SideEffectLinkedToNoteHash, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<Field, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: BoundedVec<Field, NUM_FIELDS_PER_SHA256>,\n    unencrypted_logs_preimages_length: Field,\n\n    // Header of a block whose state is used during public execution. Set by sequencer to be a header of a block\n    // previous to the one in which the tx is included.\n    historical_header: Header,\n    prover_address: AztecAddress,\n}\n\nimpl PublicContext {\n    pub fn new(inputs: PublicContextInputs, args_hash: Field) -> PublicContext {\n        let empty_storage_read = StorageRead::empty();\n        let empty_storage_update = StorageUpdateRequest::empty();\n        PublicContext {\n            inputs: inputs,\n            side_effect_counter: inputs.call_context.start_side_effect_counter,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            contract_storage_update_requests: BoundedVec::new(empty_storage_update),\n            contract_storage_reads: BoundedVec::new(empty_storage_read),\n            public_call_stack_hashes: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(SideEffect::empty()),\n            new_nullifiers: BoundedVec::new(SideEffectLinkedToNoteHash::empty()),\n\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n\n            unencrypted_logs_hash: BoundedVec::new(0),\n            unencrypted_logs_preimages_length: 0,\n\n            historical_header: inputs.historical_header,\n            prover_address: AztecAddress::zero(),\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> EthAddress {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    pub fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    pub fn timestamp(self) -> Field {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    pub fn coinbase(self) -> EthAddress {\n        self.inputs.public_global_variables.coinbase\n    }\n\n    pub fn fee_recipient(self) -> AztecAddress {\n        self.inputs.public_global_variables.fee_recipient\n    }\n\n    pub fn finish(self) -> PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_log_preimages_length = 0;\n\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_reads: self.contract_storage_reads.storage,\n            return_values: self.return_values.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack_hashes: self.public_call_stack_hashes.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            historical_header: self.inputs.historical_header,\n            prover_address: self.prover_address,\n        };\n        pub_circuit_pub_inputs\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        let side_effect = SideEffect {\n            value: note_hash,\n            counter: self.side_effect_counter\n        };\n        self.new_commitments.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        let side_effect = SideEffectLinkedToNoteHash {\n            value: nullifier,\n            note_hash: 0, // cannot nullify pending notes in public context\n            counter: self.side_effect_counter\n        };\n        self.new_nullifiers.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn message_portal(&mut self, content: Field) {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    pub fn consume_l1_to_l2_message(&mut self, msg_key: Field, content: Field, secret: Field) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(self.historical_header.state.l1_to_l2_message_tree.root, this, self.this_portal_address(), self.chain_id(), self.version(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, 0)\n    }\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        _self: Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        call_public_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n        )\n    }\n\n    pub fn call_public_function_no_args(\n        _self: Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        call_public_function_internal(\n            contract_address,\n            function_selector,\n            0,\n        )\n    }\n\n}\n","path":"/Users/sangjun/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.23.0/yarn-project/aztec-nr/aztec/src/context/public.nr"},"63":{"source":"use crate::{\n    abi::PrivateContextInputs,\n    key::nullifier_key::validate_nullifier_key_against_address,\n    messaging::process_l1_to_l2_message,\n    oracle::{\n        arguments,\n        call_private_function::call_private_function_internal,\n        enqueue_public_function_call::enqueue_public_function_call_internal,\n        context::get_portal_address,\n        header::get_header_at,\n        nullifier_key::{get_nullifier_key_pair, NullifierKeyPair},\n    },\n};\nuse dep::protocol_types::{\n    abis::{\n        call_context::CallContext,\n        function_data::FunctionData,\n        function_selector::FunctionSelector,\n        nullifier_key_validation_request::NullifierKeyValidationRequest,\n        private_call_stack_item::PrivateCallStackItem,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        public_call_stack_item::PublicCallStackItem,\n        public_circuit_public_inputs::PublicCircuitPublicInputs,\n        side_effect::{SideEffect, SideEffectLinkedToNoteHash},\n    },\n    address::{\n        AztecAddress,\n        EthAddress,\n    },\n    constants::{\n        MAX_NEW_COMMITMENTS_PER_CALL,\n        MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n        MAX_NEW_NULLIFIERS_PER_CALL,\n        MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n        MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n        MAX_PUBLIC_DATA_READS_PER_CALL,\n        MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n        MAX_READ_REQUESTS_PER_CALL,\n        MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL,\n        NUM_FIELDS_PER_SHA256,\n        RETURN_VALUES_LENGTH,\n    },\n    contract_class::ContractClassId,\n    contrakt::{\n        deployment_data::ContractDeploymentData,\n        storage_read::StorageRead,\n        storage_update_request::StorageUpdateRequest,\n    },\n    grumpkin_private_key::GrumpkinPrivateKey,\n    hash::hash_args,\n    header::Header,\n    utils::reader::Reader,\n};\nuse dep::std::option::Option;\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: PrivateContextInputs,\n    side_effect_counter: u32,\n\n    meta_hwm: u32,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    read_requests: BoundedVec<SideEffect, MAX_READ_REQUESTS_PER_CALL>,\n    nullifier_key_validation_requests: BoundedVec<NullifierKeyValidationRequest, MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    new_commitments: BoundedVec<SideEffect, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<SideEffectLinkedToNoteHash, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack_hashes : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack_hashes : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<Field, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n\n    nullifier_key: Option<NullifierKeyPair>,\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs: inputs,\n            side_effect_counter: inputs.call_context.start_side_effect_counter,\n            meta_hwm: 0,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            read_requests: BoundedVec::new(SideEffect::empty()),\n            nullifier_key_validation_requests: BoundedVec::new(NullifierKeyValidationRequest::empty()),\n\n            new_commitments: BoundedVec::new(SideEffect::empty()),\n            new_nullifiers: BoundedVec::new(SideEffectLinkedToNoteHash::empty()),\n\n            historical_header: inputs.historical_header,\n\n            private_call_stack_hashes: BoundedVec::new(0),\n            public_call_stack_hashes: BoundedVec::new(0),\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n\n            nullifier_key: Option::none(),\n        }\n    }\n\n    pub fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> EthAddress {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    pub fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    pub fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_header_at(self, block_number: u32) -> Header {\n        get_header_at(block_number, self)\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            meta_hwm: self.meta_hwm,\n            read_requests: self.read_requests.storage,\n            nullifier_key_validation_requests: self.nullifier_key_validation_requests.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            private_call_stack_hashes: self.private_call_stack_hashes.storage,\n            public_call_stack_hashes: self.public_call_stack_hashes.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            end_side_effect_counter: self.side_effect_counter,\n            encrypted_logs_hash: encrypted_logs_hash,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            encrypted_log_preimages_length: encrypted_log_preimages_length,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            historical_header: self.historical_header,\n            contract_deployment_data: self.inputs.contract_deployment_data,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version,\n        };\n        priv_circuit_pub_inputs\n    }\n\n    pub fn push_read_request(&mut self, read_request: Field) {\n        let side_effect = SideEffect {\n            value: read_request,\n            counter: self.side_effect_counter,\n        };\n        self.read_requests.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        let side_effect = SideEffect {\n            value: note_hash,\n            counter: self.side_effect_counter,\n        };\n        self.new_commitments.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        let side_effect = SideEffectLinkedToNoteHash {\n            value: nullifier,\n            note_hash: nullified_commitment,\n            counter: self.side_effect_counter,\n        };\n        self.new_nullifiers.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn request_nullifier_secret_key(&mut self, account: AztecAddress) -> GrumpkinPrivateKey {\n        let key_pair = if self.nullifier_key.is_none() {\n            let key_pair = get_nullifier_key_pair(account);\n            validate_nullifier_key_against_address(account, key_pair.public_key);\n            let request = NullifierKeyValidationRequest { public_key: key_pair.public_key, secret_key: key_pair.secret_key };\n            self.nullifier_key_validation_requests.push(request);\n            self.nullifier_key = Option::some(key_pair);\n            key_pair\n        } else {\n            let key_pair = self.nullifier_key.unwrap_unchecked();\n            // If MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL is larger than 1, need to update the way the key pair is cached.\n            assert(MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL == 1);\n            assert(key_pair.account == account, \"Cannot query nullifier key for more than one account per call\");\n            key_pair\n        };\n        key_pair.secret_key\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, content: Field)\n    // docs:end:context_message_portal\n    {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        msg_key: Field,\n        content: Field,\n        secret: Field\n    )\n    // docs:end:context_consume_l1_to_l2_message\n    {\n        let nullifier = process_l1_to_l2_message(self.historical_header.state.l1_to_l2_message_tree.root, self.this_address(), self.this_portal_address(), self.chain_id(), self.version(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, 0)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let item = call_private_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            self.side_effect_counter,\n        );\n\n        assert_eq(item.public_inputs.call_context.start_side_effect_counter, self.side_effect_counter);\n        self.side_effect_counter = item.public_inputs.end_side_effect_counter + 1;\n\n        assert(contract_address.eq(item.contract_address));\n        assert(function_selector.eq(item.function_data.selector));\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.storage_contract_address));\n        assert(item.public_inputs.call_context.storage_contract_address.eq(contract_address));\n\n        self.private_call_stack_hashes.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field\n    ) {\n        let fields = enqueue_public_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            self.side_effect_counter\n        );\n\n        let mut reader = Reader::new(fields);\n\n        // Note: Not using PublicCirclePublicInputs::deserialize here, because everything below args_hash is 0 and\n        // there is no more data in fields because there is only ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE fields!\n        let item = PublicCallStackItem {\n            contract_address:  AztecAddress::from_field(reader.read()),\n            function_data: reader.read_struct(FunctionData::deserialize),\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: reader.read_struct(CallContext::deserialize),\n                args_hash: reader.read(),\n                return_values: [0; RETURN_VALUES_LENGTH],\n                contract_storage_update_requests: [StorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_reads: [StorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack_hashes: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_commitments: [SideEffect::empty(); MAX_NEW_COMMITMENTS_PER_CALL],\n                new_nullifiers: [SideEffectLinkedToNoteHash::empty(); MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs:[0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                unencrypted_logs_hash:[0; NUM_FIELDS_PER_SHA256],\n                unencrypted_log_preimages_length: 0,\n                historical_header: Header::empty(),\n                prover_address: AztecAddress::zero(),\n            },\n            is_execution_request: true,\n        };\n        reader.finish();\n\n        assert(contract_address.eq(item.contract_address));\n        assert(function_selector.eq(item.function_data.selector));\n\n        assert_eq(item.public_inputs.call_context.start_side_effect_counter, self.side_effect_counter);\n        // We increment the sideffect counter by one, to account for the call itself being a side effect.\n        self.side_effect_counter = self.side_effect_counter + 1;\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.storage_contract_address));\n        assert(item.public_inputs.call_context.storage_contract_address.eq(contract_address));\n\n        self.public_call_stack_hashes.push(item.hash());\n    }\n}\n","path":"/Users/sangjun/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.23.0/yarn-project/aztec-nr/aztec/src/context/private.nr"},"65":{"source":"use dep::protocol_types::{\n    abis::function_selector::FunctionSelector,\n    address::AztecAddress,\n    constants::RETURN_VALUES_LENGTH,\n};\n\n#[oracle(callPublicFunction)]\nfn call_public_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field\n) -> [Field; RETURN_VALUES_LENGTH] {}\n\nunconstrained pub fn call_public_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field\n) -> [Field; RETURN_VALUES_LENGTH] {\n    call_public_function_oracle(contract_address, function_selector, args_hash)\n}\n","path":"/Users/sangjun/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.23.0/yarn-project/aztec-nr/aztec/src/oracle/public_call.nr"},"67":{"source":"use dep::std::option::Option;\nuse crate::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n};\nuse crate::utils::arr_copy_slice;\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n};\n\n#[oracle(notifyCreatedNote)]\nfn notify_created_note_oracle<N>(_storage_slot: Field, _serialized_note: [Field; N], _inner_note_hash: Field) -> Field {}\n\nunconstrained pub fn notify_created_note<N>(storage_slot: Field, serialized_note: [Field; N], inner_note_hash: Field) -> Field {\n    notify_created_note_oracle(storage_slot, serialized_note, inner_note_hash)\n}\n\n#[oracle(notifyNullifiedNote)]\nfn notify_nullified_note_oracle<N>(_nullifier: Field, _inner_note_hash: Field) -> Field {}\n\nunconstrained pub fn notify_nullified_note<N>(nullifier: Field, inner_note_hash: Field) -> Field {\n    notify_nullified_note_oracle(nullifier, inner_note_hash)\n}\n\n#[oracle(getNotes)]\nfn get_notes_oracle<N, S>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by: [u8; N],\n    _select_values: [Field; N],\n    _select_comparators: [u3; N],\n    _sort_by: [u8; N],\n    _sort_order: [u2; N],\n    _limit: u32,\n    _offset: u32,\n    _status: u2,\n    _return_size: u32,\n    _placeholder_fields: [Field; S]\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<N, S>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by: [u8; N],\n    select_values: [Field; N],\n    select_comparators: [u3; N],\n    sort_by: [u8; N],\n    sort_order: [u2; N],\n    limit: u32,\n    offset: u32,\n    status: u2,\n    mut placeholder_fields: [Field; S]\n) -> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by,\n        select_values,\n        select_comparators,\n        sort_by,\n        sort_order,\n        limit,\n        offset,\n        status,\n        return_size,\n        placeholder_fields\n    )\n}\n\nunconstrained pub fn get_notes<Note, N, M, S, NS>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u3; M],\n    sort_by: [u8; M],\n    sort_order: [u2; M],\n    limit: u32,\n    offset: u32,\n    status: u2,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialize the note array.\n    _placeholder_note_length: [Field; N] // Turbofish hack? Compiler breaks calculating read_offset unless we add this parameter\n) -> [Option<Note>; S] where Note: NoteInterface<N> {\n    let fields = get_notes_oracle_wrapper(\n        storage_slot,\n        num_selects,\n        select_by,\n        select_values,\n        select_comparators,\n        sort_by,\n        sort_order,\n        limit,\n        offset,\n        status,\n        placeholder_fields\n    );\n    let num_notes = fields[0] as u32;\n    let contract_address = AztecAddress::from_field(fields[1]);\n    for i in 0..placeholder_opt_notes.len() {\n        if i as u32 < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: Field = 2; // num_notes & contract_address.\n            let extra_preimage_length: Field = 2; // nonce & is_transient.\n            let read_offset: Field = return_header_length + i * (N + extra_preimage_length);\n            let nonce = fields[read_offset];\n            let is_transient = fields[read_offset + 1] as bool;\n            let header = NoteHeader { contract_address, nonce, storage_slot, is_transient };\n            let serialized_note = arr_copy_slice(fields, [0; N], read_offset + 2);\n            let mut note = Note::deserialize_content(serialized_note);\n            // TODO: change this to note.setHeader(header) once https://github.com/noir-lang/noir/issues/4095 is fixed\n            Note::set_header(&mut note, header);\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    }\n    placeholder_opt_notes\n}\n\n#[oracle(checkNullifierExists)]\nfn check_nullifier_exists_oracle(_inner_nullifier: Field) -> Field {}\n\nunconstrained pub fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}\n","path":"/Users/sangjun/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.23.0/yarn-project/aztec-nr/aztec/src/oracle/notes.nr"},"68":{"source":"use dep::protocol_types::{\n    abis::function_selector::FunctionSelector,\n    address::AztecAddress,\n};\n\n// contract_address + \n// args_hash +\n// crate::abi::FUNCTION_DATA_SIZE +\n// crate::abi::CALL_CONTEXT_SIZE\n// = 2 + 4 + 8\nglobal ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE: Field = 14;\n\n#[oracle(enqueuePublicFunctionCall)]\nfn enqueue_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {}\n\nunconstrained pub fn enqueue_public_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {\n    enqueue_public_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter\n    )\n}\n","path":"/Users/sangjun/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.23.0/yarn-project/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr"},"69":{"source":"#[oracle(packArguments)]\nfn pack_arguments_oracle<N>(_args: [Field; N]) -> Field {}\n\n// TODO: explain what this does.\nunconstrained pub fn pack_arguments<N>(args: [Field; N]) -> Field {\n    pack_arguments_oracle(args)\n}\n","path":"/Users/sangjun/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.23.0/yarn-project/aztec-nr/aztec/src/oracle/arguments.nr"},"70":{"source":"use dep::protocol_types::{\n    address::{\n        AztecAddress,\n        PartialAddress,\n        PublicKeysHash,\n    },\n    grumpkin_point::GrumpkinPoint,\n};\n\n#[oracle(getPublicKeyAndPartialAddress)]\nfn get_public_key_and_partial_address_oracle(_address: AztecAddress) -> [Field; 3] {}\n\nunconstrained fn get_public_key_and_partial_address_internal(address: AztecAddress) -> [Field; 3] {\n    get_public_key_and_partial_address_oracle(address)\n}\n\npub fn get_public_key(address: AztecAddress) -> GrumpkinPoint {\n    let result = get_public_key_and_partial_address_internal(address);\n    let pub_key = GrumpkinPoint::new(result[0], result[1]);\n    let partial_address = PartialAddress::from_field(result[2]);\n\n    let calculated_address = AztecAddress::compute(PublicKeysHash::compute(pub_key), partial_address);\n    assert(calculated_address.eq(address));\n\n    pub_key\n}\n","path":"/Users/sangjun/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.23.0/yarn-project/aztec-nr/aztec/src/oracle/get_public_key.nr"},"72":{"source":"use dep::protocol_types::traits::{Deserialize, Serialize};\n\n#[oracle(storageRead)]\nfn storage_read_oracle<N>(_storage_slot: Field, _number_of_elements: Field) -> [Field; N] {}\n\nunconstrained fn storage_read_oracle_wrapper<N>(_storage_slot: Field) -> [Field; N] {\n    storage_read_oracle(_storage_slot, N)\n}\n\npub fn storage_read<N>(storage_slot: Field) -> [Field; N] {\n    storage_read_oracle_wrapper(storage_slot)\n}\n\n#[oracle(storageWrite)]\nfn storage_write_oracle<N>(_storage_slot: Field, _values: [Field; N]) -> [Field; N] {}\n\nunconstrained pub fn storage_write<N>(storage_slot: Field, fields: [Field; N]) {\n    let _hash = storage_write_oracle(storage_slot, fields);\n}\n","path":"/Users/sangjun/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.23.0/yarn-project/aztec-nr/aztec/src/oracle/storage.nr"},"74":{"source":"use dep::protocol_types::{\n    address::AztecAddress,\n    constants::NUM_FIELDS_PER_SHA256,\n    grumpkin_point::GrumpkinPoint,\n};\n\n// TODO: Should take encrypted data.\n#[oracle(emitEncryptedLog)]\nfn emit_encrypted_log_oracle<N>(\n    _contract_address: AztecAddress,\n    _storage_slot: Field,\n    _encryption_pub_key: GrumpkinPoint,\n    _preimage: [Field; N]\n) -> Field {}\n\nunconstrained pub fn emit_encrypted_log<N>(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    encryption_pub_key: GrumpkinPoint,\n    preimage: [Field; N]\n) -> [Field; NUM_FIELDS_PER_SHA256] {\n    [emit_encrypted_log_oracle(contract_address, storage_slot, encryption_pub_key, preimage), 0]\n}\n\n#[oracle(emitUnencryptedLog)]\nfn emit_unencrypted_log_oracle<T>(_contract_address: AztecAddress, _event_selector: Field, _message: T) -> Field {}\n\nunconstrained pub fn emit_unencrypted_log<T>(\n    contract_address: AztecAddress,\n    event_selector: Field,\n    message: T\n) -> [Field; NUM_FIELDS_PER_SHA256] {\n    // https://github.com/AztecProtocol/aztec-packages/issues/885\n    [emit_unencrypted_log_oracle(contract_address, event_selector, message), 0]\n}\n","path":"/Users/sangjun/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.23.0/yarn-project/aztec-nr/aztec/src/oracle/logs.nr"},"76":{"source":"#[oracle(getRandomField)]\nfn rand_oracle() -> Field {}\n\nunconstrained pub fn rand() -> Field {\n    rand_oracle()\n}\n","path":"/Users/sangjun/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.23.0/yarn-project/aztec-nr/aztec/src/oracle/rand.nr"},"79":{"source":"use dep::protocol_types::{\n    address::AztecAddress,\n    grumpkin_point::GrumpkinPoint,\n    grumpkin_private_key::GrumpkinPrivateKey,\n};\n\nstruct NullifierKeyPair {\n    account: AztecAddress,\n    public_key: GrumpkinPoint,\n    secret_key: GrumpkinPrivateKey,\n}\n\n#[oracle(getNullifierKeyPair)]\nfn get_nullifier_key_pair_oracle(_account: AztecAddress) -> [Field; 4] {}\n\nunconstrained fn get_nullifier_key_pair_internal(account: AztecAddress) -> NullifierKeyPair {\n    let result = get_nullifier_key_pair_oracle(account);\n    NullifierKeyPair {\n        account,\n        public_key: GrumpkinPoint { x: result[0], y: result[1] },\n        secret_key: GrumpkinPrivateKey { high: result[2], low: result[3] }\n    }\n}\n\npub fn get_nullifier_key_pair(account: AztecAddress) -> NullifierKeyPair {\n    get_nullifier_key_pair_internal(account)\n}\n\npub fn get_nullifier_secret_key(account: AztecAddress) -> GrumpkinPrivateKey {\n    get_nullifier_key_pair_internal(account).secret_key\n}\n","path":"/Users/sangjun/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.23.0/yarn-project/aztec-nr/aztec/src/oracle/nullifier_key.nr"},"86":{"source":"use dep::protocol_types::{\n    abis::{\n        call_context::CallContext,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        public_circuit_public_inputs::PublicCircuitPublicInputs,\n    },\n    address::{AztecAddress, EthAddress},\n    contrakt::deployment_data::ContractDeploymentData,\n    hash::hash_args,\n    traits::{Hash, Serialize},\n    header::Header,\n};\n\n// docs:start:private-global-variables\nstruct PrivateGlobalVariables {\n    chain_id: Field,\n    version: Field,\n}\n// docs:end:private-global-variables\n\nimpl Serialize<2> for PrivateGlobalVariables {\n    fn serialize(self) -> [Field; 2] {\n        [self.chain_id, self.version]\n    }\n}\n\n// docs:start:public-global-variables\nstruct PublicGlobalVariables {\n    chain_id: Field,\n    version: Field,\n    block_number: Field,\n    timestamp: Field,\n    coinbase: EthAddress,\n    fee_recipient: AztecAddress,\n}\n// docs:end:public-global-variables\n\nimpl Serialize<6> for PublicGlobalVariables {\n    fn serialize(self) -> [Field; 6] {\n        [\n            self.chain_id,\n            self.version,\n            self.block_number,\n            self.timestamp,\n            self.coinbase.to_field(),\n            self.fee_recipient.to_field(),\n        ]\n    }\n}\n\n// PrivateContextInputs are expected to be provided to each private function\n// docs:start:private-context-inputs\nstruct PrivateContextInputs {\n    call_context : CallContext,\n    historical_header: Header,\n    contract_deployment_data: ContractDeploymentData,\n    private_global_variables: PrivateGlobalVariables,\n}\n// docs:end:private-context-inputs\n\n// PublicContextInputs are expected to be provided to each public function\n// docs:start:public-context-inputs\nstruct PublicContextInputs {\n    call_context: CallContext,\n    historical_header: Header,\n\n    public_global_variables: PublicGlobalVariables,\n}\n// docs:end:public-context-inputs\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hash for Hasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl Hasher {\n    pub fn new()-> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n","path":"/Users/sangjun/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.23.0/yarn-project/aztec-nr/aztec/src/abi.nr"},"87":{"source":"mod private;\nmod public;\nmod avm;\n\nuse public::PublicContext;\nuse private::PrivateContext;\nuse avm::AVMContext;\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n}\n\nimpl Context {\n    pub fn private(context: &mut PrivateContext) -> Context {\n        Context {\n            private: Option::some(context),\n            public: Option::none()\n        }\n    }\n\n    pub fn public(context: &mut PublicContext) -> Context {\n        Context {\n            public: Option::some(context),\n            private: Option::none()\n        }\n    }\n\n    pub fn none() -> Context {\n        Context {\n            public: Option::none(),\n            private: Option::none()\n        }\n    }\n}\n","path":"/Users/sangjun/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.23.0/yarn-project/aztec-nr/aztec/src/context.nr"},"89":{"source":"pub fn arr_copy_slice<T, N, M>(src: [T; N], mut dst: [T; M], offset: Field) -> [T; M] {\n    for i in 0..dst.len() {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n\n// TODO(#3470): Copied over from https://github.com/AztecProtocol/aztec-packages/blob/a07c4bd47313be6aa604a63f37857eb0136b41ba/yarn-project/noir-protocol-circuits/src/crates/rollup-lib/src/base/base_rollup_inputs.nr#L599\n// move to a shared place?\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n","path":"/Users/sangjun/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.23.0/yarn-project/aztec-nr/aztec/src/utils.nr"},"99":{"source":"use crate::context::{Context};\nuse crate::oracle::storage::storage_read;\nuse crate::oracle::storage::storage_write;\nuse dep::std::option::Option;\nuse dep::protocol_types::traits::{Deserialize, Serialize};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:public_state_struct\nstruct PublicState<T> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_state_struct\n\nimpl<T> Storage<T> for PublicState<T> {}\n\nimpl<T> PublicState<T> {\n    // docs:start:public_state_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicState {\n            context,\n            storage_slot,\n        }\n    }\n    // docs:end:public_state_struct_new\n\n    // docs:start:public_state_struct_read\n    pub fn read<T_SERIALIZED_LEN>(self) -> T where T: Deserialize<T_SERIALIZED_LEN> {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        let fields = storage_read(self.storage_slot);\n        T::deserialize(fields)\n    }\n    // docs:end:public_state_struct_read\n\n    // docs:start:public_state_struct_write\n    pub fn write<T_SERIALIZED_LEN>(self, value: T) where T: Serialize<T_SERIALIZED_LEN> {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        let fields = T::serialize(value);\n        storage_write(self.storage_slot, fields);\n    }\n    // docs:end:public_state_struct_write\n}\n","path":"/Users/sangjun/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.23.0/yarn-project/aztec-nr/aztec/src/state_vars/public_state.nr"},"102":{"source":"use crate::context::{PrivateContext, PublicContext, Context};\nuse dep::std::option::Option;\nuse dep::protocol_types::{\n    hash::pedersen_hash,\n    traits::{ToField}\n};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:map\nstruct Map<K, V> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T> Storage<T> for Map<K, T> {}\n\nimpl<K, V> Map<K, V> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map {\n            context,\n            storage_slot,\n            state_var_constructor,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V where K: ToField {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = pedersen_hash([self.storage_slot, key.to_field()],0);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n","path":"/Users/sangjun/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.23.0/yarn-project/aztec-nr/aztec/src/state_vars/map.nr"},"103":{"source":"use dep::std::option::Option;\nuse dep::protocol_types::{\n    constants::{MAX_NOTES_PER_PAGE, MAX_READ_REQUESTS_PER_CALL},\n    abis::side_effect::{SideEffect, SideEffectLinkedToNoteHash},\n};\nuse crate::context::{PrivateContext, PublicContext, Context};\nuse crate::note::{\n    lifecycle::{create_note, create_note_hash_from_public, destroy_note},\n    note_getter::{get_notes, view_notes},\n    note_getter_options::NoteGetterOptions,\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_consumption,\n};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:struct\nstruct Set<Note> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:struct\n\nimpl<T> Storage<T> for Set<T> {}\n\nimpl<Note> Set<Note> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Set {\n            context,\n            storage_slot,\n        }\n    }\n    // docs:end:new\n    // docs:start:insert\n    pub fn insert<N>(self,\n        note: &mut Note,\n        broadcast: bool,\n    ) where Note: NoteInterface<N> {\n        create_note(\n            self.context.private.unwrap(),\n            self.storage_slot,\n            note,\n            broadcast,\n        );\n    }\n    // docs:end:insert\n\n    // docs:start:insert_from_public\n    pub fn insert_from_public<N>(self, note: &mut Note) where Note: NoteInterface<N> {\n        create_note_hash_from_public(\n            self.context.public.unwrap(),\n            self.storage_slot,\n            note,\n        );\n    }\n    // docs:end:insert_from_public\n    \n    // DEPRECATED\n    fn assert_contains_and_remove(_self: Self, _note: &mut Note, _nonce: Field) {\n        assert(false, \"`assert_contains_and_remove` has been deprecated. Please call PXE.addNote() to add a note to the database. Then use Set.get_notes() and Set.remove() in your contract to verify and remove a note.\");\n    }\n\n    // DEPRECATED\n    fn assert_contains_and_remove_publicly_created(_self: Self, _note: &mut Note) {\n        assert(false, \"`assert_contains_and_remove_publicly_created` has been deprecated. Please call PXE.addNote() to add a note to the database. Then use Set.get_notes() and Set.remove() in your contract to verify and remove a note.\");\n    }\n\n    // docs:start:remove\n    pub fn remove<N>(self, note: Note) where Note: NoteInterface<N> {\n        let context = self.context.private.unwrap();\n        let note_hash = compute_note_hash_for_consumption(note);\n        let has_been_read = context.read_requests.any(|r: SideEffect| r.value == note_hash);\n        assert(has_been_read, \"Can only remove a note that has been read from the set.\");\n\n        destroy_note(\n            context,\n            note,\n        );\n    }\n    // docs:end:remove\n\n    // docs:start:get_notes\n    pub fn get_notes<N, FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, FILTER_ARGS>,\n    ) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] where Note: NoteInterface<N> {\n        let storage_slot = self.storage_slot;\n        let opt_notes = get_notes(\n            self.context.private.unwrap(),\n            storage_slot,\n            options,\n        );\n        opt_notes\n    }\n    // docs:end:get_notes\n\n    // docs:start:view_notes\n    unconstrained pub fn view_notes<N>(\n        self,\n        options: NoteViewerOptions<Note, N>,\n    ) -> [Option<Note>; MAX_NOTES_PER_PAGE] where Note: NoteInterface<N> {\n        view_notes(self.storage_slot, options)\n    }\n    // docs:end:view_notes\n}\n","path":"/Users/sangjun/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.23.0/yarn-project/aztec-nr/aztec/src/state_vars/set.nr"},"104":{"source":"use crate::context::{Context};\nuse crate::oracle::{\n    storage::{storage_read, storage_write},\n};\nuse crate::history::public_value_inclusion::prove_public_value_inclusion;\nuse dep::std::option::Option;\nuse dep::protocol_types::traits::{Deserialize, Serialize};\nuse crate::state_vars::storage::Storage;\n\nstruct StablePublicState<T>{\n    context: Context,\n    storage_slot: Field,\n}\n\nimpl<T> Storage<T> for StablePublicState<T> {}\n\nimpl<T> StablePublicState<T> {\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self {\n            context,\n            storage_slot,\n        }\n    }\n\n    // Intended to be only called once. \n    pub fn initialize<T_SERIALIZED_LEN>(self, value: T) where T: Serialize<T_SERIALIZED_LEN> {\n        assert(self.context.private.is_none(), \"Public state wrties only supported in public functions\");\n        // TODO: Must throw if the storage slot is not empty -> cannot allow overwriting\n        // This is currently impractical, as public functions are never marked `is_contract_deployment`\n        // in the `call_context`, only private functions will have this flag set.\n        let fields = T::serialize(value);\n        storage_write(self.storage_slot, fields);\n    }\n\n    pub fn read_public<T_SERIALIZED_LEN>(self) -> T where T: Deserialize<T_SERIALIZED_LEN> {\n        assert(self.context.private.is_none(), \"Public read only supported in public functions\");\n        let fields = storage_read(self.storage_slot);\n        T::deserialize(fields)\n    }\n\n    pub fn read_private<T_SERIALIZED_LEN>(self) -> T  where T: Deserialize<T_SERIALIZED_LEN> {\n        assert(self.context.public.is_none(), \"Private read only supported in private functions\");\n        let private_context = self.context.private.unwrap();\n\n        // Read the value from storage (using the public tree)\n        let fields = storage_read(self.storage_slot);\n\n        // Loop over the fields and prove their inclusion in the public tree\n        for i in 0..fields.len() {\n            // TODO: Update membership proofs to use current header (Requires #4179)\n            // Currently executing unnecessary computation:\n            // - a membership proof of the value in the public tree of the header \n            prove_public_value_inclusion(\n                fields[i],\n                self.storage_slot + i,\n                (*private_context).this_address(),\n                (*private_context),\n            )\n        }\n        T::deserialize(fields)\n    }\n\n}\n","path":"/Users/sangjun/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.23.0/yarn-project/aztec-nr/aztec/src/state_vars/stable_public_state.nr"},"120":{"source":"use crate::{\n    abis::function_selector::FunctionSelector,\n    address::{EthAddress,AztecAddress},\n    constants::{\n        CALL_CONTEXT_LENGTH,\n        GENERATOR_INDEX__CALL_CONTEXT,\n    },\n    hash::pedersen_hash,\n    traits::{\n        Deserialize,\n        Hash,\n        Serialize,\n    },\n};\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : AztecAddress,\n    storage_contract_address : AztecAddress,\n    portal_contract_address : EthAddress,\n\n    function_selector : FunctionSelector,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n    is_contract_deployment : bool,\n\n    start_side_effect_counter : u32,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn assert_is_zero(self) {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/3595)\n        assert(self.msg_sender.to_field() == 0);\n        assert(self.storage_contract_address.to_field() == 0);\n        assert(self.portal_contract_address.to_field() == 0);\n        assert(self.function_selector.to_field() == 0);\n        assert(self.is_delegate_call == false);\n        assert(self.is_static_call == false);\n        assert(self.is_contract_deployment == false);\n        assert(self.start_side_effect_counter == 0);\n    }\n}\n\nimpl Eq for CallContext {\n    fn eq(self, call_context: CallContext) -> bool {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/3595)\n        call_context.msg_sender.eq(self.msg_sender)\n            & call_context.storage_contract_address.eq(self.storage_contract_address)\n            & call_context.portal_contract_address.eq(self.portal_contract_address)\n            & call_context.function_selector.eq(self.function_selector)\n            & (call_context.is_delegate_call == self.is_delegate_call)\n            & (call_context.is_static_call == self.is_static_call)\n            & (call_context.is_contract_deployment == self.is_contract_deployment)\n            & (call_context.start_side_effect_counter == self.start_side_effect_counter)\n    }\n}\n\nimpl Hash for CallContext {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)\n    }\n}\n\nimpl Serialize<CALL_CONTEXT_LENGTH> for CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender.to_field(),\n            self.storage_contract_address.to_field(),\n            self.portal_contract_address.to_field(),\n            self.function_selector.to_field(),\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.is_contract_deployment as Field,\n            self.start_side_effect_counter as Field,\n        ]\n    }\n}\n\nimpl Deserialize<CALL_CONTEXT_LENGTH> for CallContext {\n    fn deserialize(serialized: [Field; CALL_CONTEXT_LENGTH]) -> CallContext {\n        CallContext {\n            msg_sender: AztecAddress::from_field(serialized[0]),\n            storage_contract_address: AztecAddress::from_field(serialized[1]),\n            portal_contract_address: EthAddress::from_field(serialized[2]),\n            function_selector: FunctionSelector::from_field(serialized[3]),\n            is_delegate_call: serialized[4] as bool,\n            is_static_call: serialized[5] as bool,\n            is_contract_deployment: serialized[6] as bool,\n            start_side_effect_counter: serialized[7] as u32,\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let context: CallContext = dep::std::unsafe::zeroed();\n    let serialized = context.serialize();\n    let deserialized = CallContext::deserialize(serialized);\n    assert(context.eq(deserialized));\n}\n\n#[test]\nfn hash_smoke() {\n    let context: CallContext = dep::std::unsafe::zeroed();\n    let _hashed = context.hash();\n}\n","path":"/Users/sangjun/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.23.0/yarn-project/noir-protocol-circuits/src/crates/types/src/abis/call_context.nr"},"121":{"source":"use crate::{\n    abis::{\n        call_context::CallContext,\n        side_effect::{SideEffect, SideEffectLinkedToNoteHash},\n    },\n    address::AztecAddress,\n    constants::{\n        MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n        MAX_NEW_NULLIFIERS_PER_CALL,\n        MAX_NEW_COMMITMENTS_PER_CALL,\n        MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n        MAX_PUBLIC_DATA_READS_PER_CALL,\n        MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n        NUM_FIELDS_PER_SHA256,\n        RETURN_VALUES_LENGTH,\n        GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS,\n        PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    },\n    contrakt::{\n        storage_read::StorageRead,\n        storage_update_request::StorageUpdateRequest,\n    },\n    hash::pedersen_hash,\n    header::Header,\n    traits::{\n        Hash,\n        Serialize,\n        Deserialize,\n    },\n    utils::reader::Reader,\n};\n\nstruct PublicCircuitPublicInputs{\n    call_context: CallContext,\n\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n\n    contract_storage_update_requests: [StorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_reads: [StorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n\n    // todo: add sideeffect ranges for the input to these hashes\n    public_call_stack_hashes: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_commitments: [SideEffect; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [SideEffectLinkedToNoteHash; MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [Field; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n\n    // Here so that the gas cost of this request can be measured by circuits, without actually needing to feed in the\n    // variable-length data.\n    unencrypted_log_preimages_length: Field,\n\n    // Header of a block whose state is used during public execution. Set by sequencer to be a header of a block\n    // previous to the one in which the tx is included.\n    historical_header: Header,\n\n    prover_address: AztecAddress,\n}\n\nimpl Eq for PublicCircuitPublicInputs {\n    fn eq(self, other: Self) -> bool {\n        self.serialize() == other.serialize()\n    }\n}\n\nimpl Serialize<PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PublicCircuitPublicInputs {\n    fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.extend_from_array(self.call_context.serialize());   \n        fields.push(self.args_hash);\n        fields.extend_from_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.extend_from_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.extend_from_array(self.contract_storage_reads[i].serialize());\n        }\n        fields.extend_from_array(self.public_call_stack_hashes);\n\n        for i in 0..MAX_NEW_COMMITMENTS_PER_CALL{\n            fields.extend_from_array(self.new_commitments[i].serialize());\n        }\n        for i in 0..MAX_NEW_NULLIFIERS_PER_CALL{\n            fields.extend_from_array(self.new_nullifiers[i].serialize());\n        }\n        fields.extend_from_array(self.new_l2_to_l1_msgs);\n        fields.extend_from_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.extend_from_array(self.historical_header.serialize());\n        fields.push(self.prover_address.to_field());\n        fields.storage\n    }\n}\n\nimpl Deserialize<PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PublicCircuitPublicInputs {\n    fn deserialize(serialized: [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH]) -> Self {\n        // TODO(#4390): This should accept a reader ^ to avoid copying data.\n        let mut reader = Reader::new(serialized);\n        let inputs = PublicCircuitPublicInputs {\n            call_context: reader.read_struct(CallContext::deserialize),\n            args_hash: reader.read(),\n            return_values: reader.read_array([0; RETURN_VALUES_LENGTH]),\n            contract_storage_update_requests: reader.read_struct_array(StorageUpdateRequest::deserialize, [StorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL]),\n            contract_storage_reads: reader.read_struct_array(StorageRead::deserialize, [StorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL]),\n            public_call_stack_hashes: reader.read_array([0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL]),\n            new_commitments: reader.read_struct_array(SideEffect::deserialize, [SideEffect::empty(); MAX_NEW_COMMITMENTS_PER_CALL]),\n            new_nullifiers: reader.read_struct_array(SideEffectLinkedToNoteHash::deserialize, [SideEffectLinkedToNoteHash::empty(); MAX_NEW_NULLIFIERS_PER_CALL]),\n            new_l2_to_l1_msgs: reader.read_array([0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL]),\n            unencrypted_logs_hash: reader.read_array([0; NUM_FIELDS_PER_SHA256]),\n            unencrypted_log_preimages_length: reader.read(),\n            historical_header: reader.read_struct(Header::deserialize),\n            prover_address: reader.read_struct(AztecAddress::deserialize),\n        };\n\n        reader.finish();\n        inputs\n    }\n}\n\nimpl Hash for PublicCircuitPublicInputs {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let pcpi: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n    let serialized = pcpi.serialize();\n    let deserialized = PublicCircuitPublicInputs::deserialize(serialized);\n    assert(pcpi.eq(deserialized));\n}\n\n#[test]\nfn hash_smoke() {\n    let pcpi: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n    let _hashed = pcpi.hash();\n}\n","path":"/Users/sangjun/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.23.0/yarn-project/noir-protocol-circuits/src/crates/types/src/abis/public_circuit_public_inputs.nr"},"124":{"source":"use crate::abis::{\n    function_data::FunctionData,\n    public_circuit_public_inputs::PublicCircuitPublicInputs,\n};\nuse crate::address::AztecAddress;\nuse crate::constants::GENERATOR_INDEX__CALL_STACK_ITEM;\nuse crate::traits::Hash;\n\nstruct PublicCallStackItem {\n    contract_address: AztecAddress,\n    public_inputs: PublicCircuitPublicInputs,\n    function_data: FunctionData,\n    // True if this call stack item represents a request to execute a function rather than a\n    // fulfilled execution. Used when enqueuing calls from private to public functions.\n    is_execution_request: bool,\n}\n\nimpl Hash for PublicCallStackItem {\n    fn hash(self) -> Field {\n        let item = if self.is_execution_request {\n            self.as_execution_request()\n        } else {\n            self\n        };\n\n        dep::std::hash::pedersen_hash_with_separator([\n            item.contract_address.to_field(),\n            item.function_data.hash(),\n            item.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\nimpl PublicCallStackItem {\n    fn as_execution_request(self) -> Self {\n        let public_inputs = self.public_inputs;\n        let mut request_public_inputs: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n        request_public_inputs.call_context = public_inputs.call_context;\n        request_public_inputs.args_hash = public_inputs.args_hash;\n\n        let call_stack_item = PublicCallStackItem {\n            contract_address: self.contract_address,\n            function_data: self.function_data,\n            is_execution_request: true,\n            public_inputs: request_public_inputs,\n        };\n        call_stack_item\n    }\n}\n","path":"/Users/sangjun/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.23.0/yarn-project/noir-protocol-circuits/src/crates/types/src/abis/public_call_stack_item.nr"},"127":{"source":"use crate::{\n    abis::function_selector::FunctionSelector,\n    constants::{\n        GENERATOR_INDEX__FUNCTION_DATA,\n        FUNCTION_DATA_LENGTH,\n    },\n    hash::pedersen_hash,\n    traits::{\n        Serialize,\n        Hash,\n        Deserialize,\n    },\n};\n\nstruct FunctionData {\n    // First four bytes of the abi encoding \n    // of a function. \n    selector : FunctionSelector,\n    is_internal : bool,\n    is_private : bool,\n    is_constructor : bool,\n}\n\nimpl Eq for FunctionData {\n    fn eq(self, other: Self) -> bool {\n        self.selector.eq(other.selector) &\n        self.is_internal == other.is_internal &\n        self.is_private == other.is_private &\n        self.is_constructor == other.is_constructor\n    }\n}\n\nimpl Serialize<FUNCTION_DATA_LENGTH> for FunctionData {\n    // A field is ~256 bits\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/3057): Since, function data can fit into a Field,\n    // This method will simply return a bit packed Field instead of hashing\n    fn serialize(self) -> [Field; FUNCTION_DATA_LENGTH] {\n        [\n            self.selector.to_field(),\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ]\n    }\n}\n\nimpl Deserialize<FUNCTION_DATA_LENGTH> for FunctionData {\n    fn deserialize(serialized: [Field; FUNCTION_DATA_LENGTH]) -> Self {\n        Self {\n            selector: FunctionSelector::from_field(serialized[0]),\n            is_internal: serialized[1] as bool,\n            is_private: serialized[2] as bool,\n            is_constructor: serialized[3] as bool,\n        }\n    }\n}\n\nimpl Hash for FunctionData {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__FUNCTION_DATA)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let data: FunctionData = dep::std::unsafe::zeroed();\n    let serialized = data.serialize();\n    let deserialized = FunctionData::deserialize(serialized);\n    assert(data.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let data: FunctionData = dep::std::unsafe::zeroed();\n    let hash = data.hash();\n\n    // Value from function_data.test.ts \"computes empty item hash\" test\n    assert_eq(hash, 0x200569267c0f73ac89aaa414239398db9445dd4ad3a8cf37015cd55b8d4c5e8d);\n}\n","path":"/Users/sangjun/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.23.0/yarn-project/noir-protocol-circuits/src/crates/types/src/abis/function_data.nr"},"130":{"source":"use crate::utils::field::field_from_bytes;\nuse dep::std::cmp::Eq;\nuse crate::traits::{Serialize, Deserialize};\n\nglobal SELECTOR_SIZE = 4;\n\nstruct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self {\n            inner: fields[0] as u32\n        }\n    }\n}\n\nimpl FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n\n    pub fn from_u32(value: u32) -> Self {\n        Self {\n            inner : value,\n        }\n    }\n\n    pub fn from_field(value : Field) -> Self {\n        Self {\n            inner : value as u32,\n        }\n    }\n\n    pub fn from_signature<N>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = dep::std::hash::keccak256(bytes, bytes.len() as u32);\n\n        let mut selector_be_bytes = [0; SELECTOR_SIZE];\n        for i in 0..SELECTOR_SIZE {\n            selector_be_bytes[i] = hash[i];\n        }\n\n        FunctionSelector::from_field(field_from_bytes(selector_be_bytes, true))\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n","path":"/Users/sangjun/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.23.0/yarn-project/noir-protocol-circuits/src/crates/types/src/abis/function_selector.nr"},"143":{"source":"use crate::{\n    constants::{\n        GENERATOR_INDEX__CONTRACT_ADDRESS,\n        GENERATOR_INDEX__PARTIAL_ADDRESS,\n        GENERATOR_INDEX__CONSTRUCTOR\n    },\n    hash::pedersen_hash,\n    contract_class::ContractClassId,\n    utils,\n    grumpkin_point::GrumpkinPoint,\n};\nuse dep::std::cmp::Eq;\nuse crate::traits::{Empty, ToField, Serialize, Deserialize};\nuse crate::type_serialization::{ETH_ADDRESS_SERIALIZED_LEN, AZTEC_ADDRESS_SERIALIZED_LEN};\n\n// Aztec address\nstruct AztecAddress {\n    inner : Field\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other : Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self {\n            inner : 0\n        }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_SERIALIZED_LEN> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_SERIALIZED_LEN] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_SERIALIZED_LEN> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_SERIALIZED_LEN]) -> Self {\n        AztecAddress::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self {\n            inner: 0\n        }\n    }\n\n    pub fn from_field(field : Field) -> Self {\n        Self {\n            inner : field\n        }\n    }\n\n    pub fn compute_from_public_key(pub_key: GrumpkinPoint, contract_class_id: ContractClassId, salt: Field, initialization_hash: Field, portal_contract_address: EthAddress) -> AztecAddress {\n        AztecAddress::compute(PublicKeysHash::compute(pub_key), PartialAddress::compute(contract_class_id, salt, initialization_hash, portal_contract_address))\n    }\n\n    pub fn compute(pub_keys_hash: PublicKeysHash, partial_address: PartialAddress) -> AztecAddress {\n        AztecAddress::from_field(\n            pedersen_hash(\n                [pub_keys_hash.to_field(), partial_address.to_field()],\n                GENERATOR_INDEX__CONTRACT_ADDRESS\n            )\n        )\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n    \n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs : Self, rhs : Self) -> Self{\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self {\n            inner : result\n        }\n    }\n}\n\nstruct EthAddress{\n    inner : Field\n}\n\nimpl Eq for EthAddress {\n    fn eq(self, other : Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for EthAddress {\n    fn empty() -> Self {\n        Self {\n            inner : 0\n        }\n    }\n}\n\nimpl ToField for EthAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<ETH_ADDRESS_SERIALIZED_LEN> for EthAddress {\n    fn serialize(self: Self) -> [Field; ETH_ADDRESS_SERIALIZED_LEN] {\n        [self.inner]\n    }\n}\n\nimpl Deserialize<ETH_ADDRESS_SERIALIZED_LEN> for EthAddress {\n    fn deserialize(fields: [Field; ETH_ADDRESS_SERIALIZED_LEN]) -> Self {\n        Self {\n            inner: fields[0]\n        }\n    }\n}\n\nimpl EthAddress{\n    pub fn zero() -> Self {\n        Self {\n            inner: 0\n        }\n    }\n\n    pub fn from_field(field : Field) -> Self {\n        Self {\n            inner : field\n        }\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs : Self, rhs : Self) -> Self{\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self {\n            inner : result\n        }\n    }\n}\n\n// Partial address\nstruct PartialAddress {\n    inner : Field\n}\n\nimpl ToField for PartialAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl PartialAddress {\n    pub fn from_field(field : Field) -> Self {\n        Self {\n            inner : field\n        }\n    }\n\n    pub fn compute(contract_class_id: ContractClassId, salt: Field, initialization_hash: Field, portal_contract_address: EthAddress) -> Self {\n        PartialAddress::compute_from_salted_initialization_hash(contract_class_id, SaltedInitializationHash::compute(salt, initialization_hash, portal_contract_address))\n    }\n\n    pub fn compute_from_salted_initialization_hash(contract_class_id: ContractClassId, salted_initialization_hash: SaltedInitializationHash) -> Self {\n        PartialAddress::from_field(\n            pedersen_hash([\n                contract_class_id.to_field(),\n                salted_initialization_hash.to_field()\n            ], GENERATOR_INDEX__PARTIAL_ADDRESS)\n        )\n    }\n\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n// Salted initialization hash. Used in the computation of a partial address.\nstruct SaltedInitializationHash {\n    inner: Field\n}\n\nimpl ToField for SaltedInitializationHash {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl SaltedInitializationHash {\n    pub fn from_field(field : Field) -> Self {\n        Self {\n            inner : field\n        }\n    }\n\n    pub fn compute(salt : Field, initialization_hash: Field, portal_contract_address: EthAddress) -> Self {\n        SaltedInitializationHash::from_field(\n            pedersen_hash([\n                salt,\n                initialization_hash,\n                portal_contract_address.to_field(),\n            ], GENERATOR_INDEX__PARTIAL_ADDRESS)\n        )\n    }\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n// Public keys hash. Used in the computation of an address.\nstruct PublicKeysHash {\n    inner: Field\n}\n\nimpl ToField for PublicKeysHash {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<1> for PublicKeysHash {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<1> for PublicKeysHash {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        PublicKeysHash::from_field(fields[0])\n    }\n}\n\nimpl PublicKeysHash {\n    pub fn from_field(field : Field) -> Self {\n        Self {\n            inner : field\n        }\n    }\n\n    pub fn compute(public_key: GrumpkinPoint) -> Self {\n        PublicKeysHash::from_field(\n            pedersen_hash([\n                public_key.x,\n                public_key.y,\n            ], GENERATOR_INDEX__PARTIAL_ADDRESS)\n        )\n    }\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\npub fn compute_initialization_hash(selector: Field, args_hash: Field) -> Field {\n    pedersen_hash(\n        [\n        selector,\n        args_hash\n    ],\n        GENERATOR_INDEX__CONSTRUCTOR\n    )\n}\n","path":"/Users/sangjun/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.23.0/yarn-project/noir-protocol-circuits/src/crates/types/src/address.nr"},"156":{"source":"global ARGS_LENGTH: Field = 16;\nglobal RETURN_VALUES_LENGTH: Field = 4;\n\n/**\n * Convention for constant array lengths are mainly divided in 2 classes:\n *  - FUNCTION CALL\n *  - TRANSACTION\n *\n * Agreed convention is to use MAX_XXX_PER_CALL resp. MAX_XXX_PER_TX, where XXX denotes a type of element such as\n * commitment, or nullifier, e.g.,:\n *  - MAX_NEW_NULLIFIERS_PER_CALL\n *  - MAX_NEW_COMMITMENTS_PER_TX\n *\n * In the kernel circuits, we accumulate elements such as commitments and the nullifiers from all functions calls in a\n * transaction. Therefore, we always must have:\n * MAX_XXX_PER_TX ≥ MAX_XXX_PER_CALL\n *\n * For instance:\n * MAX_NEW_COMMITMENTS_PER_TX ≥ MAX_NEW_COMMITMENTS_PER_CALL\n * MAX_NEW_NULLIFIERS_PER_TX ≥ MAX_NEW_NULLIFIERS_PER_CALL\n *\n */\n\n// docs:start:constants\n// \"PER CALL\" CONSTANTS\nglobal MAX_NEW_COMMITMENTS_PER_CALL: Field = 16;\nglobal MAX_NEW_NULLIFIERS_PER_CALL: Field = 16;\nglobal MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL: Field = 4;\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL: Field = 4;\nglobal MAX_NEW_L2_TO_L1_MSGS_PER_CALL: Field = 2;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL: Field = 16;\nglobal MAX_PUBLIC_DATA_READS_PER_CALL: Field = 16;\nglobal MAX_READ_REQUESTS_PER_CALL: Field = 32;\nglobal MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL: Field = 1;\n\n// \"PER TRANSACTION\" CONSTANTS\nglobal MAX_NEW_COMMITMENTS_PER_TX: Field = 64;\nglobal MAX_NEW_NULLIFIERS_PER_TX: Field = 64;\nglobal MAX_PRIVATE_CALL_STACK_LENGTH_PER_TX: Field = 8;\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_TX: Field = 8;\nglobal MAX_NEW_L2_TO_L1_MSGS_PER_TX: Field = 2;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX: Field = 16;\nglobal MAX_PUBLIC_DATA_READS_PER_TX: Field = 16;\nglobal MAX_NEW_CONTRACTS_PER_TX: Field = 1;\nglobal MAX_READ_REQUESTS_PER_TX: Field = 128;\nglobal MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_TX: Field = 4;\nglobal NUM_ENCRYPTED_LOGS_HASHES_PER_TX: Field = 1;\nglobal NUM_UNENCRYPTED_LOGS_HASHES_PER_TX: Field = 1;\n\nglobal MAX_NEW_COMMITMENTS_PER_TX_META: Field = 8;\nglobal MAX_NEW_NULLIFIERS_PER_TX_META: Field = 8;\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_TX_META: Field = 2;\n// docs:end:constants\n\n// ROLLUP CONTRACT CONSTANTS - constants used only in l1-contracts\nglobal NUMBER_OF_L1_L2_MESSAGES_PER_ROLLUP: Field = 16;\n\n// TREES RELATED CONSTANTS\nglobal VK_TREE_HEIGHT: Field = 3;\nglobal FUNCTION_TREE_HEIGHT: Field = 5;\nglobal CONTRACT_TREE_HEIGHT: Field = 16;\nglobal NOTE_HASH_TREE_HEIGHT: Field = 32;\nglobal PUBLIC_DATA_TREE_HEIGHT: Field = 40;\nglobal NULLIFIER_TREE_HEIGHT: Field = 20;\nglobal L1_TO_L2_MSG_TREE_HEIGHT: Field = 16;\nglobal ROLLUP_VK_TREE_HEIGHT: Field = 8;\nglobal ARTIFACT_FUNCTION_TREE_MAX_HEIGHT = 5;\n\n// SUB-TREES RELATED CONSTANTS\nglobal CONTRACT_SUBTREE_HEIGHT: Field = 0;\nglobal CONTRACT_SUBTREE_SIBLING_PATH_LENGTH: Field = 16;\nglobal NOTE_HASH_SUBTREE_HEIGHT: Field = 6;\nglobal NOTE_HASH_SUBTREE_SIBLING_PATH_LENGTH: Field = 26;\nglobal NULLIFIER_SUBTREE_HEIGHT: Field = 6;\nglobal PUBLIC_DATA_SUBTREE_HEIGHT: Field = 4;\nglobal ARCHIVE_HEIGHT: Field = 16;\nglobal NULLIFIER_SUBTREE_SIBLING_PATH_LENGTH: Field = 14;\nglobal PUBLIC_DATA_SUBTREE_SIBLING_PATH_LENGTH: Field = 36;\nglobal L1_TO_L2_MSG_SUBTREE_HEIGHT: Field = 4;\nglobal L1_TO_L2_MSG_SUBTREE_SIBLING_PATH_LENGTH: Field = 12;\n\n// MISC CONSTANTS\nglobal FUNCTION_SELECTOR_NUM_BYTES: Field = 4;\nglobal MAPPING_SLOT_PEDERSEN_SEPARATOR: Field = 4;\n// sha256 hash is stored in two fields to accommodate all 256-bits of the hash\nglobal NUM_FIELDS_PER_SHA256: Field = 2;\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 32;\n\n// CONTRACT CLASS CONSTANTS\n// This should be around 8192 (assuming 2**15 instructions packed at 8 bytes each), \n// but it's reduced to speed up build times, otherwise the ClassRegisterer takes over 5 mins to compile.\n// We are not using 1024 so we can squeeze in a few more args to methods that consume packed public bytecode,\n// such as the ClassRegisterer.register, and still land below the 32 * 32 max args limit for hashing.\nglobal MAX_PACKED_PUBLIC_BYTECODE_SIZE_IN_FIELDS: Field = 1000;\n// Bytecode size for private functions is per function, not for the entire contract.\n// Note that private functions bytecode includes a mix of acir and brillig.\nglobal MAX_PACKED_BYTECODE_SIZE_PER_PRIVATE_FUNCTION_IN_FIELDS: Field = 500;\n// Same for unconstrained functions: the size is per function.\nglobal MAX_PACKED_BYTECODE_SIZE_PER_UNCONSTRAINED_FUNCTION_IN_FIELDS: Field = 500;\n// Since we are not yet emitting selectors we'll use this magic value to identify events emitted by the ClassRegisterer.\n// This is just a stopgap until we implement proper selectors.\n// sha224sum 'struct ContractClassRegistered {contract_class_id: ContractClassId, version: Field, artifact_hash: Field, private_functions_root: Field, packed_public_bytecode: [Field; MAX_PACKED_PUBLIC_BYTECODE_SIZE_IN_FIELDS] }'\nglobal REGISTERER_CONTRACT_CLASS_REGISTERED_MAGIC_VALUE = 0x6999d1e02b08a447a463563453cb36919c9dd7150336fc7c4d2b52f8;\n// sha224sum 'struct ClassPrivateFunctionBroadcasted'\nglobal REGISTERER_PRIVATE_FUNCTION_BROADCASTED_MAGIC_VALUE = 0x1b70e95fde0b70adc30496b90a327af6a5e383e028e7a43211a07bcd;\n// sha224sum 'struct ClassUnconstrainedFunctionBroadcasted'\nglobal REGISTERER_UNCONSTRAINED_FUNCTION_BROADCASTED_MAGIC_VALUE = 0xe7af816635466f128568edb04c9fa024f6c87fb9010fdbffa68b3d99;\n\n// CONTRACT INSTANCE CONSTANTS\n// sha224sum 'struct ContractInstanceDeployed'\nglobal DEPLOYER_CONTRACT_INSTANCE_DEPLOYED_MAGIC_VALUE = 0x85864497636cf755ae7bde03f267ce01a520981c21c3682aaf82a631;\n\n// NOIR CONSTANTS - constants used only in yarn-packages/noir-contracts\n// Some are defined here because Noir doesn't yet support globals referencing other globals yet.\n// Move these constants to a noir file once the issue below is resolved:\n// https://github.com/noir-lang/noir/issues/1734\nglobal L1_TO_L2_MESSAGE_LENGTH: Field = 8;\nglobal L1_TO_L2_MESSAGE_ORACLE_CALL_LENGTH: Field = 25;\nglobal MAX_NOTE_FIELDS_LENGTH: Field = 20;\n// GET_NOTE_ORACLE_RETURN_LENGT = MAX_NOTE_FIELDS_LENGTH + 1 + 2\n// The plus 1 is 1 extra field for nonce.\n// + 2 for EXTRA_DATA: [number_of_return_notes, contract_address]\nglobal GET_NOTE_ORACLE_RETURN_LENGTH: Field = 23;\nglobal MAX_NOTES_PER_PAGE: Field = 10;\n// VIEW_NOTE_ORACLE_RETURN_LENGTH = MAX_NOTES_PER_PAGE * (MAX_NOTE_FIELDS_LENGTH + 1) + 2;\nglobal VIEW_NOTE_ORACLE_RETURN_LENGTH: Field = 212;\nglobal CALL_CONTEXT_LENGTH: Field = 8;\nglobal GLOBAL_VARIABLES_LENGTH: Field = 6;\nglobal PARTIAL_STATE_REFERENCE_LENGTH: Field = 8;\nglobal STATE_REFERENCE_LENGTH: Field = 10; // 2 for snap + 8 for partial\nglobal HEADER_LENGTH: Field = 20; // 2 for last_archive, 2 for body hash, 10 for state reference, 6 for global vars \nglobal FUNCTION_DATA_LENGTH: Field = 4;\nglobal CONTRACT_DEPLOYMENT_DATA_LENGTH: Field = 6;\n// Change this ONLY if you have changed the PrivateCircuitPublicInputs structure.\n// In other words, if the structure/size of the public inputs of a function call changes then we should change this\n// constant as well PRIVATE_CALL_STACK_ITEM_LENGTH\nglobal PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH: Field = 207;\nglobal PRIVATE_CALL_STACK_ITEM_LENGTH: Field = 212;\nglobal CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH: Field = 3;\nglobal CONTRACT_STORAGE_READ_LENGTH: Field = 2;\n// Change this ONLY if you have changed the PublicCircuitPublicInputs structure.\nglobal PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH: Field = 203;\nglobal GET_NOTES_ORACLE_RETURN_LENGTH: Field = 674;\nglobal COMMITMENTS_NUM_BYTES_PER_BASE_ROLLUP: Field = 2048;\nglobal NULLIFIERS_NUM_BYTES_PER_BASE_ROLLUP: Field = 2048;\nglobal PUBLIC_DATA_WRITES_NUM_BYTES_PER_BASE_ROLLUP: Field = 1024;\nglobal CONTRACTS_NUM_BYTES_PER_BASE_ROLLUP: Field = 32;\nglobal CONTRACT_DATA_NUM_BYTES_PER_BASE_ROLLUP: Field = 64;\nglobal CONTRACT_DATA_NUM_BYTES_PER_BASE_ROLLUP_UNPADDED: Field = 52;\nglobal L2_TO_L1_MSGS_NUM_BYTES_PER_BASE_ROLLUP: Field = 64;\nglobal LOGS_HASHES_NUM_BYTES_PER_BASE_ROLLUP: Field = 64;\n\n/**\n * Enumerate the hash_indices which are used for pedersen hashing.\n * We start from 1 to avoid the default generators. The generator indices are listed\n * based on the number of elements each index hashes. The following conditions must be met:\n *\n * +-----------+-------------------------------+----------------------+\n * | Hash size | Number of elements hashed (n) | Condition to use     |\n * |-----------+-------------------------------+----------------------|\n * | LOW       | n ≤ 8                         | 0 < hash_index ≤ 32  |\n * | MID       | 8 < n ≤ 16                    | 32 < hash_index ≤ 40 |\n * | HIGH      | 16 < n ≤ 48                   | 40 < hash_index ≤ 48 |\n * +-----------+-------------------------------+----------------------+\n *\n * Note: When modifying, modify `GeneratorIndexPacker` in packer.hpp accordingly.\n */\n// Indices with size ≤ 8\nglobal GENERATOR_INDEX__COMMITMENT = 1;\nglobal GENERATOR_INDEX__COMMITMENT_NONCE = 2;\nglobal GENERATOR_INDEX__UNIQUE_COMMITMENT = 3;\nglobal GENERATOR_INDEX__SILOED_COMMITMENT = 4;\nglobal GENERATOR_INDEX__NULLIFIER = 5;\nglobal GENERATOR_INDEX__INITIALIZATION_NULLIFIER = 6;\nglobal GENERATOR_INDEX__OUTER_NULLIFIER = 7;\nglobal GENERATOR_INDEX__PUBLIC_DATA_READ = 8;\nglobal GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST = 9;\nglobal GENERATOR_INDEX__FUNCTION_DATA = 10;\nglobal GENERATOR_INDEX__FUNCTION_LEAF = 11;\nglobal GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA = 12;\nglobal GENERATOR_INDEX__CONSTRUCTOR = 13;\nglobal GENERATOR_INDEX__CONSTRUCTOR_ARGS = 14;\nglobal GENERATOR_INDEX__CONTRACT_ADDRESS = 15;\nglobal GENERATOR_INDEX__CONTRACT_LEAF = 16;\nglobal GENERATOR_INDEX__CALL_CONTEXT = 17;\nglobal GENERATOR_INDEX__CALL_STACK_ITEM = 18;\nglobal GENERATOR_INDEX__CALL_STACK_ITEM_2 = 19;\nglobal GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET = 20;\nglobal GENERATOR_INDEX__L2_TO_L1_MSG = 21;\nglobal GENERATOR_INDEX__TX_CONTEXT = 22;\nglobal GENERATOR_INDEX__PUBLIC_LEAF_INDEX = 23;\nglobal GENERATOR_INDEX__PUBLIC_DATA_LEAF = 24;\nglobal GENERATOR_INDEX__SIGNED_TX_REQUEST = 25;\nglobal GENERATOR_INDEX__GLOBAL_VARIABLES = 26;\nglobal GENERATOR_INDEX__PARTIAL_ADDRESS = 27;\nglobal GENERATOR_INDEX__BLOCK_HASH = 28;\nglobal GENERATOR_INDEX__SIDE_EFFECT = 29;\n// Indices with size ≤ 16\nglobal GENERATOR_INDEX__TX_REQUEST = 33;\nglobal GENERATOR_INDEX__SIGNATURE_PAYLOAD = 34;\n// Indices with size ≤ 44\nglobal GENERATOR_INDEX__VK = 41;\nglobal GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS = 42;\nglobal GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS = 43;\nglobal GENERATOR_INDEX__FUNCTION_ARGS = 44;\n","path":"/Users/sangjun/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.23.0/yarn-project/noir-protocol-circuits/src/crates/types/src/constants.nr"},"160":{"source":"struct Reader<N> {\n    data: [Field; N],\n    offset: Field,\n}\n\nimpl<N> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_array<K>(&mut self, mut result: [Field; K]) -> [Field; K] {\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    // TODO(#4394)\n    pub fn read_struct<T, K>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array([0; K]));\n        result\n    }\n\n    pub fn read_struct_array<T, K, C>(&mut self, deserialise: fn([Field; K]) -> T, mut result: [T; C]) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    } \n}\n","path":"/Users/sangjun/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.23.0/yarn-project/noir-protocol-circuits/src/crates/types/src/utils/reader.nr"},"164":{"source":"use crate::traits::{Serialize, Deserialize};\n\nglobal BOOL_SERIALIZED_LEN: Field = 1;\nglobal U32_SERIALIZED_LEN: Field = 1;\nglobal U8_SERIALIZED_LEN: Field = 1;\nglobal FIELD_SERIALIZED_LEN: Field = 1;\nglobal AZTEC_ADDRESS_SERIALIZED_LEN = 1;\nglobal ETH_ADDRESS_SERIALIZED_LEN = 1;\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n","path":"/Users/sangjun/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.23.0/yarn-project/noir-protocol-circuits/src/crates/types/src/type_serialization.nr"},"167":{"source":"use crate::address::{AztecAddress, EthAddress};\nuse crate::mocked::VerificationKey;\nuse crate::abis::function_selector::FunctionSelector;\nuse crate::abis::function_leaf_preimage::{ContractClassFunctionLeafPreimage, FunctionLeafPreimage};\nuse crate::contract_class::ContractClassId;\nuse crate::abis::new_contract_data::NewContractData as ContractLeafPreimage;\nuse crate::abis::function_data::FunctionData;\nuse crate::abis::side_effect::{SideEffect};\nuse crate::utils::uint256::U256;\nuse crate::constants::{\n        ARGS_HASH_CHUNK_COUNT,\n        ARGS_HASH_CHUNK_LENGTH,\n        CONTRACT_TREE_HEIGHT, \n        FUNCTION_TREE_HEIGHT, \n        NOTE_HASH_TREE_HEIGHT,\n        NUM_FIELDS_PER_SHA256,\n        GENERATOR_INDEX__SILOED_COMMITMENT,\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n        GENERATOR_INDEX__VK,\n        GENERATOR_INDEX__CONSTRUCTOR,\n        GENERATOR_INDEX__PARTIAL_ADDRESS,\n        GENERATOR_INDEX__CONTRACT_ADDRESS,\n        GENERATOR_INDEX__COMMITMENT_NONCE,\n        GENERATOR_INDEX__UNIQUE_COMMITMENT,\n        GENERATOR_INDEX__FUNCTION_ARGS,\n};\n\nuse dep::std::hash::{pedersen_hash_with_separator, sha256};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256(bytes_to_hash);\n\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (sha256_hashed[15 - i] as Field) * v;\n        low = low + (sha256_hashed[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    let hash_in_a_field = low + high * v;\n\n    hash_in_a_field\n}\n\npub fn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < (args.len() as u32) {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < (args.len() as u32) {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = pedersen_hash(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS);\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Checks that `value` is a member of a merkle tree with root `root` at position `index`\n// The witness being the `sibling_path`\npub fn assert_check_membership<N>(value: Field, index: Field, sibling_path: [Field; N], root: Field) {\n    let calculated_root = root_from_sibling_path(value, index, sibling_path);\n    assert(calculated_root == root, \"membership check failed\");\n}\n\n// Calculate the Merkle tree root from the sibling path and leaf.\n//\n// The leaf is hashed with its sibling, and then the result is hashed\n// with the next sibling etc in the path. The last hash is the root.\n//\n// TODO(David/Someone): The cpp code is using a uint256, whereas its\n// TODO a bit simpler in Noir to just have a bit array.\n// TODO: I'd generally like to avoid u256 for algorithms like \n// this because it means we never even need to consider cases where \n// the index is greater than p.\npub fn root_from_sibling_path<N>(leaf: Field, leaf_index: Field, sibling_path: [Field; N]) -> Field {\n    let mut node = leaf;\n    let indices = leaf_index.to_le_bits(N);\n\n    for i in 0..N {\n        let (hash_left, hash_right) = if indices[i] == 1 {\n            (sibling_path[i], node)\n        } else {\n            (node, sibling_path[i])\n        };\n        node = merkle_hash(hash_left, hash_right);\n    }\n    node\n}\n\n// Calculate the function tree root from the sibling path and leaf preimage.\n//\n// TODO: The cpp code passes in components of the FunctionLeafPreimage and then \n// builds it up. We should build it up and then pass the leaf preimage as a parameter.\n// We can then choose to have a general method that takes in anything hashable\n// and deduplicate the logic in `contract_tree_root_from_siblings`\npub fn function_tree_root_from_siblings(\n    selector: FunctionSelector,\n    is_internal: bool,\n    is_private: bool,\n    vk_hash: Field,\n    acir_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = FunctionLeafPreimage { selector, is_internal, is_private, vk_hash, acir_hash };\n\n    let function_leaf = function_leaf_preimage.hash();\n\n    let function_tree_root = root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path);\n\n    function_tree_root\n}\n\n// Calculate the contract tree root from the sibling path and leaf preimage.\npub fn contract_tree_root_from_siblings(\n    contract_class_id: ContractClassId,\n    storage_contract_address: AztecAddress,\n    portal_contract_address: EthAddress,\n    contract_leaf_index: Field,\n    contract_leaf_sibling_path: [Field; CONTRACT_TREE_HEIGHT]\n) -> Field {\n    //TODO(Kev): if we use shorthand syntax here, we get an error as expected,\n    // since variable name is `storage_contract_address` but the span is incorrect.\n    let contract_leaf_preimage = ContractLeafPreimage { contract_address: storage_contract_address, portal_contract_address, contract_class_id };\n\n    let contract_leaf = contract_leaf_preimage.hash();\n\n    let computed_contract_tree_root = root_from_sibling_path(contract_leaf, contract_leaf_index, contract_leaf_sibling_path);\n\n    computed_contract_tree_root\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path)\n}\n\npub fn read_request_root_from_siblings(\n    read_request: Field,\n    leaf_index: Field,\n    sibling_path: [Field; NOTE_HASH_TREE_HEIGHT]\n) -> Field {\n    root_from_sibling_path(read_request, leaf_index, sibling_path)\n}\n\npub fn silo_commitment(address: AztecAddress, inner_commitment: Field) -> Field {\n    pedersen_hash(\n        [\n        address.to_field(),\n        inner_commitment\n    ],\n        GENERATOR_INDEX__SILOED_COMMITMENT\n    )\n}\n\npub fn silo_nullifier(address: AztecAddress, nullifier: Field) -> Field {\n    pedersen_hash(\n        [\n        address.to_field(),\n        nullifier\n    ],\n        GENERATOR_INDEX__OUTER_NULLIFIER\n    )\n}\n\nfn merkle_hash(left: Field, right: Field) -> Field {\n    pedersen_hash([left, right], 0)\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk(_vk: VerificationKey) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\n// TODO CPP uses blake2s for this\npub fn compute_new_contract_address_hash(new_contract_address: AztecAddress) -> Field {\n    dep::std::hash::pedersen_hash([new_contract_address.to_field()])\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    rollup_version_id: Field,\n    portal_contract_address: EthAddress,\n    chain_id: Field,\n    content: Field\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new(0);\n\n    let inputs = [\n        contract_address.to_field(), rollup_version_id, portal_contract_address.to_field(), chain_id, content\n    ];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes = inputs[i].to_be_bytes(32);\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\npub fn compute_constructor_hash(\n    function_data: FunctionData,\n    args_hash: Field,\n    constructor_vk_hash: Field\n) -> Field {\n    let function_data_hash = function_data.hash();\n\n    pedersen_hash(\n        [\n        function_data_hash,\n        args_hash,\n        constructor_vk_hash\n    ],\n        GENERATOR_INDEX__CONSTRUCTOR\n    )\n}\n\n// Computes sha256 hash of 2 input hashes stored in 4 fields.\n// \n// This method is bn254 specific. Two fields is needed in order to \n// encode the sha256 output. It can be abstracted away with any 4-2 hash function.\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\n// Returning a Field would be desirable because then this can be replaced with \n// poseidon without changing the rest of the code\n//\npub fn accumulate_sha256(input: [U128; 4]) -> [Field; NUM_FIELDS_PER_SHA256] {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually \n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field \n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    //\n    // Concatenate 4 u128 bit integers into a byte array.\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..4 {\n        let input_as_bytes = input[offset].to_be_bytes();\n        for byte_index in 0..16 {\n            hash_input_flattened[offset * 16 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    let sha_digest = dep::std::hash::sha256(hash_input_flattened);\n\n    U256::from_bytes32(sha_digest).to_u128_limbs()\n}\n\npub fn compute_logs_hash(\n    previous_log_hash: [Field; 2],\n    current_log_hash: [Field; 2]\n) -> [Field; NUM_FIELDS_PER_SHA256] {\n    accumulate_sha256(\n        [\n        U128::from_integer(previous_log_hash[0]),\n        U128::from_integer(previous_log_hash[1]),\n        U128::from_integer(current_log_hash[0]),\n        U128::from_integer(current_log_hash[1])\n    ]\n    )\n}\n\npub fn compute_commitment_nonce(first_nullifier: Field, commitment_index: Field) -> Field {\n    pedersen_hash(\n        [\n        first_nullifier,\n        commitment_index\n    ],\n        GENERATOR_INDEX__COMMITMENT_NONCE\n    )\n}\n\npub fn compute_unique_siloed_commitment(nonce: Field, siloed_commitment: Field) -> Field {\n    pedersen_hash(\n        [\n        nonce,\n        siloed_commitment\n    ],\n        GENERATOR_INDEX__UNIQUE_COMMITMENT\n    )\n}\n\npub fn compute_unique_siloed_commitments<N>(\n    first_nullifier: Field,\n    siloed_commitments: [SideEffect; N]\n) -> [SideEffect; N] {\n    let mut unique_siloed_commitments = [SideEffect::empty(); N];\n    for i in 0..N {\n        let siloed_commitment = siloed_commitments[i];\n        if siloed_commitment.value != 0 {\n            let nonce = compute_commitment_nonce(first_nullifier, i);\n            unique_siloed_commitments[i] = SideEffect {\n                value: compute_unique_siloed_commitment(nonce, siloed_commitment.value),\n                counter: siloed_commitment.counter\n                };\n        }\n    }\n    unique_siloed_commitments\n}\n\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n    dep::std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n","path":"/Users/sangjun/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.23.0/yarn-project/noir-protocol-circuits/src/crates/types/src/hash.nr"},"174":{"source":"use crate::{\n    constants::{\n        CONTRACT_STORAGE_READ_LENGTH,\n        GENERATOR_INDEX__PUBLIC_DATA_READ,\n    },\n    hash::pedersen_hash,\n    traits::{\n        Deserialize,\n        Hash,\n        Empty,\n        Serialize,\n    },\n};\n\nstruct StorageRead {\n    storage_slot: Field,\n    current_value: Field,\n}\n\nimpl Eq for StorageRead {\n    fn eq(self, other: Self) -> bool {\n        (self.storage_slot == other.storage_slot) & (self.current_value == other.current_value)\n    }\n}\n\nimpl Empty for StorageRead {   \n    fn empty() -> Self {\n        Self {\n            storage_slot: 0,\n            current_value: 0,\n        }\n    }\n}\n\nimpl Hash for StorageRead {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_READ)\n    }\n}\n\nimpl Serialize<CONTRACT_STORAGE_READ_LENGTH> for StorageRead {\n    fn serialize(self) -> [Field; CONTRACT_STORAGE_READ_LENGTH] {\n        [self.storage_slot, self.current_value]\n    }\n}\n\nimpl Deserialize<CONTRACT_STORAGE_READ_LENGTH> for StorageRead {\n    fn deserialize(serialized: [Field; CONTRACT_STORAGE_READ_LENGTH]) -> Self {\n        Self {\n            storage_slot: serialized[0],\n            current_value: serialized[1],\n        }\n    }\n}\n\nimpl StorageRead {\n    pub fn is_empty(self) -> bool {\n        self.storage_slot == 0\n    }\n}\n","path":"/Users/sangjun/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.23.0/yarn-project/noir-protocol-circuits/src/crates/types/src/contrakt/storage_read.nr"},"180":{"source":"use dep::aztec::{\n    protocol_types::address::AztecAddress,\n    context::Context,\n    note::note_getter_options::NoteGetterOptions,\n    state_vars::set::Set,\n};\nuse dep::value_note::{\n    filter::filter_notes_min_sum,\n    value_note::ValueNote,\n};\n\nstruct EasyPrivateUint {\n    context: Context,\n    set: Set<ValueNote>,\n    storage_slot: Field,\n}\n\nimpl EasyPrivateUint {\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        let set = Set {\n            context,\n            storage_slot\n        };\n        EasyPrivateUint {\n            context,\n            set,\n            storage_slot,\n        }\n    }\n\n    // Very similar to `value_note::utils::increment`.\n    pub fn add(self, addend: u120, owner: AztecAddress) {\n        // Creates new note for the owner.\n        let mut addend_note = ValueNote::new(addend as Field, owner);\n\n        // Insert the new note to the owner's set of notes.\n        // docs:start:insert\n        self.set.insert(&mut addend_note, true);\n        // docs:end:insert\n    }\n\n    // Very similar to `value_note::utils::decrement`.\n    pub fn sub(self, subtrahend: u120, owner: AztecAddress) {\n        // docs:start:get_notes\n        let options = NoteGetterOptions::with_filter(filter_notes_min_sum, subtrahend as Field);\n        let maybe_notes = self.set.get_notes(options);\n        // docs:end:get_notes\n\n        let mut minuend: u120 = 0;\n        for i in 0..maybe_notes.len() {\n            if maybe_notes[i].is_some() {\n                let note = maybe_notes[i].unwrap_unchecked();\n\n                // Ensure the notes are actually owned by the owner (to prevent user from generating a valid proof while\n                // spending someone else's notes).\n                assert(note.owner.eq(owner));\n\n                // Removes the note from the owner's set of notes.\n                // docs:start:remove\n                self.set.remove(note);\n                // docs:end:remove\n\n                minuend += note.value as u120;\n            }\n        }\n\n        assert(minuend >= subtrahend);\n\n        // Creates change note for the owner.\n        let result_value = minuend - subtrahend;\n        let mut result_note = ValueNote::new(result_value as Field, owner);\n        self.set.insert(&mut result_note, result_value != 0);\n    }\n}\n","path":"/Users/sangjun/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.23.0/yarn-project/aztec-nr/easy-private-state/src/easy_private_state.nr"},"182":{"source":"use dep::aztec::note::{\n    note_getter::view_notes,\n    note_viewer_options::NoteViewerOptions,\n};\nuse dep::aztec::state_vars::set::Set;\nuse crate::value_note::{VALUE_NOTE_LEN, ValueNote};\n\nunconstrained pub fn get_balance(set: Set<ValueNote>) -> Field {\n    get_balance_with_offset(set, 0)\n}\n\nunconstrained pub fn get_balance_with_offset(set: Set<ValueNote>, offset: u32) -> Field {\n    let mut balance = 0;\n    // docs:start:view_notes\n    let options = NoteViewerOptions::new().set_offset(offset);\n    let opt_notes = set.view_notes(options);\n    // docs:end:view_notes\n    let len = opt_notes.len();\n    for i in 0..len {\n        if opt_notes[i].is_some() {\n            balance += opt_notes[i].unwrap_unchecked().value;\n        }\n    }\n    if (opt_notes[len - 1].is_some()) {\n        balance += get_balance_with_offset(set, offset + opt_notes.len() as u32);\n    }\n\n    balance\n}\n","path":"/Users/sangjun/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.23.0/yarn-project/aztec-nr/value-note/src/balance_utils.nr"},"185":{"source":"use dep::aztec::{\n    protocol_types::{\n        address::AztecAddress,\n        traits::{Deserialize, Serialize}\n    },\n    note::{\n        note_header::NoteHeader,\n        note_interface::NoteInterface,\n        utils::compute_note_hash_for_consumption,\n    },\n    oracle::{\n        rand::rand,\n        nullifier_key::get_nullifier_secret_key,\n        get_public_key::get_public_key,\n    },\n    log::emit_encrypted_log,\n    hash::pedersen_hash,\n    context::PrivateContext,\n};\n\nglobal VALUE_NOTE_LEN: Field = 3; // 3 plus a header.\n\n// docs:start:value-note-def\nstruct ValueNote {\n    value: Field,\n    owner: AztecAddress,\n    randomness: Field,\n    header: NoteHeader,\n}\n// docs:end:value-note-def\n\nimpl NoteInterface<VALUE_NOTE_LEN> for ValueNote {\n    fn serialize_content(self) -> [Field; VALUE_NOTE_LEN] {\n        [self.value, self.owner.to_field(), self.randomness]\n    }\n\n    fn deserialize_content(serialized_note: [Field; VALUE_NOTE_LEN]) -> Self {\n        ValueNote {\n            value: serialized_note[0],\n            owner: AztecAddress::from_field(serialized_note[1]),\n            randomness: serialized_note[2],\n            header: NoteHeader::empty(),\n        }\n    }\n\n    fn compute_note_content_hash(self) -> Field {\n        // TODO(#1205) Should use a non-zero generator index.\n        pedersen_hash(self.serialize_content(),0)\n    }\n\n    // docs:start:nullifier\n\n    fn compute_nullifier(self, context: &mut PrivateContext) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_consumption(self);\n        let secret = context.request_nullifier_secret_key(self.owner);\n        // TODO(#1205) Should use a non-zero generator index.\n        pedersen_hash([\n            note_hash_for_nullify,\n            secret.low,\n            secret.high,\n        ],0)\n    }\n\n    // docs:end:nullifier\n\n    fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_consumption(self);\n        let secret = get_nullifier_secret_key(self.owner);\n        // TODO(#1205) Should use a non-zero generator index.\n        pedersen_hash([\n            note_hash_for_nullify,\n            secret.low,\n            secret.high,\n        ],0)\n    }\n\n    fn set_header(&mut self, header: NoteHeader) {\n        self.header = header;\n    }\n\n    fn get_header(self) -> NoteHeader {\n        self.header\n    }\n\n    // Broadcasts the note as an encrypted log on L1.\n    fn broadcast(self, context: &mut PrivateContext, slot: Field) {\n        let encryption_pub_key = get_public_key(self.owner);\n        emit_encrypted_log(\n            context,\n            (*context).this_address(),\n            slot,\n            encryption_pub_key,\n            self.serialize_content(),\n        );\n    }\n}\n\nimpl ValueNote {\n    pub fn new(value: Field, owner: AztecAddress) -> Self {\n        let randomness = rand();\n        let header = NoteHeader::empty();\n        ValueNote {\n            value,\n            owner,\n            randomness,\n            header,\n        }\n    }\n}\n","path":"/Users/sangjun/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.23.0/yarn-project/aztec-nr/value-note/src/value_note.nr"},"187":{"source":"use dep::std::cmp::Eq;\nuse dep::aztec::protocol_types::traits::{Deserialize, Serialize};\n\nstruct SafeU120 {\n    value: u120,\n}\n\nimpl Eq for SafeU120 {\n    fn eq(\n        self: Self,\n        other: Self\n    ) -> bool {\n        self.value == other.value\n    }\n}\n\nglobal SAFE_U120_SERIALIZED_LEN: Field = 1;\n\nimpl Serialize<SAFE_U120_SERIALIZED_LEN> for SafeU120 {\n    fn serialize(value: SafeU120) -> [Field; SAFE_U120_SERIALIZED_LEN] {\n        [value.value as Field]\n    }\n}\n\nimpl Deserialize<SAFE_U120_SERIALIZED_LEN> for SafeU120 {\n    // This is safe when reading from storage IF only correct safeu120 was written to storage\n    fn deserialize(fields: [Field; SAFE_U120_SERIALIZED_LEN]) -> SafeU120 {\n        SafeU120 { value: fields[0] as u120 }\n    }\n}\n\nimpl SafeU120 {\n    pub fn min() -> Self {\n        Self {\n            value: 0\n        }\n    }\n\n    pub fn max() -> Self {\n        Self {\n            value: 0xffffffffffffffffffffffffffffff\n        }\n    }\n\n    pub fn new(\n        value: Field,\n    ) -> Self {\n        // Check that it actually will fit. Spending a lot of constraints here :grimacing:\n        let bytes = value.to_be_bytes(32);\n        for i in 0..17 {\n            assert(bytes[i] == 0, \"Value too large for SafeU120\");\n        }\n        Self {\n            value: value as u120\n        }\n    }\n\n    pub fn is_zero(\n        self: Self,\n    ) -> bool {\n        self.value == 0\n    }\n\n    pub fn lt(self: Self, other: Self) -> bool {\n        self.value < other.value\n    }\n\n    pub fn le(self: Self, other: Self) -> bool {\n        self.value <= other.value\n    }\n\n    pub fn gt(self: Self, other: Self) -> bool {\n        self.value > other.value\n    }\n\n    pub fn ge(self: Self, other: Self) -> bool {\n        self.value >= other.value\n    }\n\n    pub fn sub(\n      self: Self,\n      b: Self,\n    ) -> Self {\n        assert(self.value >= b.value, \"Underflow\");\n        Self {\n            value: self.value - b.value\n        }\n    }\n\n    pub fn add(\n        self: Self,\n        b: Self,\n    ) -> Self {\n        let c: u120 = self.value + b.value;\n        assert(c >= self.value, \"Overflow\");\n        Self {\n            value: c\n        }\n    }\n\n    pub fn mul(\n        self: Self,\n        b: Self,\n    ) -> Self {\n        let c: u120 = self.value * b.value;\n        if !b.is_zero() {\n            assert(c / b.value == self.value, \"Overflow\");\n        }\n        Self {\n            value: c\n        }\n    }\n\n    pub fn div(\n        self: Self,\n        b: Self,\n    ) -> Self {\n        assert(!b.is_zero(), \"Divide by zero\");\n        Self {\n            value: self.value / b.value\n        }\n    }\n\n    pub fn mul_div(\n        self: Self,\n        b: Self,\n        divisor: Self\n    ) -> Self {\n        self.mul(b).div(divisor)\n    }\n\n    pub fn mul_div_up(\n        self: Self,\n        b: Self,\n        divisor: Self\n    ) -> Self {\n        let c = self.mul(b);\n        assert(!divisor.is_zero(), \"Divide by zero\");\n        let adder = ((self.value * b.value % divisor.value) as u120 > 0) as u120;\n        c.div(divisor).add(Self {value: adder})\n    }\n\n    // todo: implement mul_div with 240 bit intermediate values.\n}\n\n#[test]\nfn test_init() {\n    let a = SafeU120::new(1);\n    assert(a.value == 1);\n}\n\n#[test]\nfn test_init_max() {\n    let a = SafeU120::max();\n    assert(a.value == 0xffffffffffffffffffffffffffffff);\n}\n\n#[test]\nfn test_init_min() {\n    let a = SafeU120::min();\n    assert(a.value == 0);\n}\n\n#[test]\nfn test_is_zero() {\n    let a = SafeU120::min();\n    assert(a.value == 0);\n    assert(a.is_zero() == true);\n}\n\n#[test]\nfn test_eq() {\n    let a = SafeU120::new(1);\n    let b = SafeU120::new(1);\n    assert(a.eq(b));\n}\n\n#[test]\nfn test_lt() {\n    let a = SafeU120::new(1);\n    let b = SafeU120::new(2);\n    assert(a.lt(b));\n    assert(b.lt(a) == false);\n}\n\n#[test]\nfn test_le() {\n    let a = SafeU120::new(2);\n    let b = SafeU120::new(2);\n    let c = SafeU120::new(5);\n    assert(a.le(b));\n    assert(a.le(c));\n    assert(c.le(a) == false);\n}\n\n#[test]\nfn test_gt() {\n    let a = SafeU120::new(1);\n    let b = SafeU120::new(2);\n    assert(b.gt(a));\n    assert(a.gt(b) == false);\n}\n\n#[test]\nfn test_ge() {\n    let a = SafeU120::new(2);\n    let b = SafeU120::new(2);\n    let c = SafeU120::new(5);\n    assert(a.ge(b));\n    assert(a.ge(c) == false);\n    assert(c.ge(a));\n}\n\n#[test(should_fail)]\nfn test_init_too_large() {\n    let b = SafeU120::max().value as Field + 1; // max + 1\n    let _a = SafeU120::new(b);\n}\n\n#[test]\nfn test_add() {\n    let a = SafeU120::new(1);\n    let b = SafeU120::new(2);\n    let c = SafeU120::add(a, b);\n    assert(c.value == 3);\n}\n\n#[test(should_fail)]\nfn test_add_overflow() {\n    let a = SafeU120::max();\n    let b = SafeU120::new(1);\n    let _c = SafeU120::add(a, b);\n}\n\n#[test]\nfn test_sub() {\n    let a = SafeU120::new(2);\n    let b = SafeU120::new(1);\n    let c = SafeU120::sub(a, b);\n    assert(c.value == 1);\n}\n\n#[test(should_fail)]\nfn test_sub_underflow() {\n    let a = SafeU120::new(1);\n    let b = SafeU120::new(2);\n    let _c = SafeU120::sub(a, b);\n}\n\n#[test]\nfn test_mul() {\n    let a = SafeU120::new(2);\n    let b = SafeU120::new(3);\n    let c = SafeU120::mul(a, b);\n    assert(c.value == 6);\n}\n\n#[test(should_fail)]\nfn test_mul_overflow() {\n    let a = SafeU120::max();\n    let b = SafeU120::new(2);\n    let _c = SafeU120::mul(a, b);\n}\n\n#[test]\nfn test_div() {\n    let a = SafeU120::new(6);\n    let b = SafeU120::new(3);\n    let c = SafeU120::div(a, b);\n    assert(c.value == 2);\n}\n\n#[test(should_fail)]\nfn test_div_by_zero() {\n    let a = SafeU120::new(6);\n    let b = SafeU120::new(0);\n    let _c = SafeU120::div(a, b);\n}\n\n#[test]\nfn test_mul_div() {\n    let a = SafeU120::new(6);\n    let b = SafeU120::new(3);\n    let c = SafeU120::new(2);\n    let d = SafeU120::mul_div(a, b, c);\n    assert(d.value == 9);\n}\n\n#[test(should_fail)]\nfn test_mul_div_zero_divisor() {\n    let a = SafeU120::new(6);\n    let b = SafeU120::new(3);\n    let c = SafeU120::new(0);\n    let _d = SafeU120::mul_div(a, b, c);\n}\n\n#[test(should_fail)]\nfn test_mul_div_ghost_overflow() {\n    let a = SafeU120::max();\n    let b = SafeU120::new(2);\n    let c = SafeU120::new(4);\n    let _d = SafeU120::mul_div(a, b, c);\n}\n\n#[test]\nfn test_mul_div_up_rounding() {\n    let a = SafeU120::new(6);\n    let b = SafeU120::new(3);\n    let c = SafeU120::new(5);\n    let d = SafeU120::mul_div_up(a, b, c);\n    assert(d.value == 4);\n}\n\n#[test]\nfn test_mul_div_up_non_rounding() {\n    let a = SafeU120::new(6);\n    let b = SafeU120::new(3);\n    let c = SafeU120::new(2);\n    let d = SafeU120::mul_div_up(a, b, c);\n    assert(d.value == 9);\n}\n\n#[test(should_fail)]\nfn test_mul_div_up_ghost_overflow() {\n    let a = SafeU120::max();\n    let b = SafeU120::new(2);\n    let c = SafeU120::new(9);\n    let _d = SafeU120::mul_div_up(a, b, c);\n}\n\n// It should not be possible for us to overflow `mul_div_up` through the adder, since that require the divisor to be 1\n// since we otherwise would not be at the max value. If divisor is 1, adder is 0.\n#[test(should_fail)]\nfn test_mul_div_up_zero_divisor() {\n    let a = SafeU120::new(6);\n    let b = SafeU120::new(3);\n    let c = SafeU120::new(0);\n    let _d = SafeU120::mul_div_up(a, b, c);\n}\n","path":"/Users/sangjun/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.23.0/yarn-project/aztec-nr/safe-math/src/safe_u120.nr"}}}

